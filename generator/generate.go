package generator

import (
	"bufio"
	"fmt"
	"os"
	"strings"
	"text/template"
)

// Names represents the data used for generating the file
type Names struct {
	PackageName string
	Names       []string
}

func readNamesFromFile() ([]string, error) {
	filename := "generator/names.txt"
	file, err := os.Open(filename)
	if err != nil {
		return nil, err
	}
	defer file.Close()

	var names []string
	scanner := bufio.NewScanner(file)
	for scanner.Scan() {
		names = append(names, scanner.Text())
	}
	if err := scanner.Err(); err != nil {
		return nil, err
	}
	return names, nil
}

func generateNamesFile(names []string) error {

	// Trim whitespace from each name, just in case.
	for i, name := range names {
		names[i] = strings.TrimSpace(name)
	}

	var newNames []string
	currentGroup := []string{}
	for i, name := range names {
		isLastElement := len(names) == i+1
		isLastInGroup := len(currentGroup) == 4 || isLastElement // Check for last in group or last element overall

		currentGroup = append(currentGroup, fmt.Sprintf("\"%s\"", name))

		if isLastInGroup {
			newNames = append(newNames, strings.Join(currentGroup, ",")+",")
			currentGroup = []string{} // Clear the current group for the next
			if !isLastElement {       // Add newline and indentation if not the absolute last element
				newNames = append(newNames, "\n\t\t")
			}
		}
	}

	// Define the template for the generated file (same as before)
	tmpl := template.Must(template.New("names").Parse(`package {{.PackageName}}
// This file is generated by the generator tool; DO NOT EDIT

var NamesList = []string{
	{{- range .Names }}{{.}}{{end -}}} // List of names for DnD characters
`))

	// Define the data for the template
	data := Names{
		PackageName: "cmd",
		Names:       newNames,
	}

	// Create the output file (same as before)
	f, err := os.OpenFile("cmd/names.go", os.O_WRONLY|os.O_CREATE|os.O_TRUNC, 0644)
	if err != nil {
		return err
	}
	defer f.Close()

	// Generate the file content and write it to the output file (same as before)
	return tmpl.Execute(f, data)
}

// Generate the names.go file by reading names from a file
func Generate() error {
	names, err := readNamesFromFile()
	if err != nil {
		return err
	}
	return generateNamesFile(names)
}
