{{define "package"}}package species
// This file is generated by cmd/generator/generator.go. DO NOT EDIT.{{end}}
{{define "imports"}}
import (
    "fmt"
	"os"

	"github.com/audstanley/DnD-Name-Generator-Binary/cmd"
	"github.com/spf13/cobra"
){{end}}
{{define "variables"}}
type Print struct{
	First string
    Last string
    Special string
    SpecialFlag bool
    Location string
    LocationFlag bool
    Gender string
	Female bool
	Male bool
	Nonbinary bool
	Number int
}

var speciesPrint Print
{{end}}
{{define "SpeciesCommand"}}
// Add SpeciesCommand to handle the logic
var SpeciesCommand = &cobra.Command{
	Use:   "species",
	Short: "Generate names for Dungeons and Dragons species based on the species name.",
	Args : func (cmd *cobra.Command, args []string) error {
        if len(args) == 0 {
            cmd.Help()
            os.Exit(0)
        } else if len(args) < 2 {
            fmt.Println("Incorrect number of args.  <arg1> <arg2> are required")
            os.Exit(1)
        }
        // as written, the command ignores anything more than 2
        return nil
    },
}
{{end}}
{{define "SpeciesSubCommands"}}
{{range $i, $v := .}}
// {{$v.GlobalVariableName}}Command to handle the logic
var {{$v.GlobalVariableName}}Command = &cobra.Command{Use:"{{$v.CommandVariable}}",Short:"Generate names for Dungeons and Dragons species based on the {{$v.CommandVariable}}",RunE: func(cmd *cobra.Command, args []string) error { {{$v.GlobalVariableName}}.GetRandomFirstAndLastName(cmd);return nil},}
var Female{{$v.GlobalVariableName}}Command = &cobra.Command{Use: "female", Short: "Generate names for Dungeons and Dragons species based on female gender",RunE: func(cmd *cobra.Command, args []string) error {speciesPrint.Female = true;{{$v.GlobalVariableName}}.Init();{{$v.GlobalVariableName}}.GetFirstAndLastByGender(speciesPrint);return nil;},}
var Male{{$v.GlobalVariableName}}Command = &cobra.Command{Use: "male", Short: "Generate names for Dungeons and Dragons species based on male gender",RunE: func(cmd *cobra.Command, args []string) error {speciesPrint.Male = true;{{$v.GlobalVariableName}}.Init();{{$v.GlobalVariableName}}.GetFirstAndLastByGender(speciesPrint);return nil},}
var Nonbinary{{$v.GlobalVariableName}}Command = &cobra.Command{Use: "nonbinary", Short: "Generate names for Dungeons and Dragons species based on nonbinary gender",RunE: func(cmd *cobra.Command, args []string) error {speciesPrint.Nonbinary = true;{{$v.GlobalVariableName}}.Init();{{$v.GlobalVariableName}}.GetFirstAndLastByGender(speciesPrint);return nil},}
{{end}}
{{end}}
{{define "initFunction"}}
func init() {
	cobra.OnInitialize(cmd.InitConfig)
	cmd.RootCmd.AddCommand(cmd.Generator)
	cmd.RootCmd.AddCommand(SpeciesCommand)

	// Here you will define your flags and configuration settings.
	// Cobra supports persistent flags, which, if defined here,
	// will be global for your application.
	cmd.RootCmd.PersistentFlags().StringVar(&cmd.CfgFile, "config", "", "config file (default is $HOME/.dnd-names.yaml)")
	//RootCmd.PersistentFlags().StringArrayP("number", "n", []string{"1"}, "Number of names to generate")

	// Cobra also supports local flags, which will only run
	// when this action is called directly.
	cmd.RootCmd.PersistentFlags().BoolVar(&cmd.EnableDebug, "debug", os.Getenv("DEBUG") == "true", "Enable debug mode")
	cmd.RootCmd.Flags().IntVarP(&cmd.Count, "number", "n", 1, "Number of names to generate")
	// RootCmd.PersistentFlags().BoolVarP(&generate, "generate", "g", false, "generate names from the generator/names.txt file, outputs go code to cmd/names.go")
	// SpeciesCommand.PersistentFlags().BoolVar(&firstFName, "first", false, "generate a first name, make sure to specify the species")

    {{range $i, $v := .}}SpeciesCommand.AddCommand({{$v.GlobalVariableName}}Command);{{$v.GlobalVariableName}}Command.AddCommand(Female{{$v.GlobalVariableName}}Command);{{$v.GlobalVariableName}}Command.AddCommand(Male{{$v.GlobalVariableName}}Command);{{$v.GlobalVariableName}}Command.AddCommand(Nonbinary{{$v.GlobalVariableName}}Command)
	Female{{$v.GlobalVariableName}}Command.PersistentFlags().IntVarP(&speciesPrint.Number, "number", "n", 1, "Number of names to generate");Female{{$v.GlobalVariableName}}Command.PersistentFlags().BoolVarP(&speciesPrint.SpecialFlag, "special", "s", false, "Generate a special name");Female{{$v.GlobalVariableName}}Command.PersistentFlags().BoolVarP(&speciesPrint.LocationFlag, "location", "l", false, "Generate a location for the character");
	Male{{$v.GlobalVariableName}}Command.PersistentFlags().IntVarP(&speciesPrint.Number, "number", "n", 1, "Number of names to generate");Male{{$v.GlobalVariableName}}Command.PersistentFlags().BoolVarP(&speciesPrint.SpecialFlag, "special", "s", false, "Generate a special name");Male{{$v.GlobalVariableName}}Command.PersistentFlags().BoolVarP(&speciesPrint.LocationFlag, "location", "l", false, "Generate a location for the character");
	Nonbinary{{$v.GlobalVariableName}}Command.PersistentFlags().IntVarP(&speciesPrint.Number, "number", "n", 1, "Number of names to generate");Nonbinary{{$v.GlobalVariableName}}Command.PersistentFlags().BoolVarP(&speciesPrint.SpecialFlag, "special", "s", false, "Generate a special name");Nonbinary{{$v.GlobalVariableName}}Command.PersistentFlags().BoolVarP(&speciesPrint.LocationFlag, "location", "l", false, "Generate a location for the character");
	{{end}}
}
{{end}}
{{template "package"}}{{template "imports" .}}{{template "variables" .}}{{template "SpeciesCommand" .}}{{template "SpeciesSubCommands" .}}{{template "initFunction" .}}