





package species
// This file is generated by cmd/generator/generator.go. DO NOT EDIT.
import (
	"fmt"
	"os"

	"github.com/audstanley/DnD-Name-Generator-Binary/cmd"
	"github.com/spf13/cobra"
)
type Print struct{
	First string
	Last string
	Special string
	SpecialFlag bool
	Location string
	LocationFlag bool
	Gender string
	Female bool
	Male bool
	Nonbinary bool
	Number int
}

var speciesPrint Print

// Add SpeciesCommand to handle the logic
var SpeciesCommand = &cobra.Command{
	Use:   "species",
	Short: "Generate names for Dungeons and Dragons species based on the species name.",
	Args : func (cmd *cobra.Command, args []string) error {
		if len(args) == 0 {
			cmd.Help()
			os.Exit(0)
		} else if len(args) < 2 {
			fmt.Println("Incorrect number of args.  <arg1> <arg2> are required")
			os.Exit(1)
		}
		// as written, the command ignores anything more than 2
		return nil
	},
}


// AarakocraCommand to handle the logic
var AarakocraCommand = &cobra.Command{Use:"aarakocra",Short:"Generate names for Dungeons and Dragons species based on the aarakocra",RunE: func(cmd *cobra.Command, args []string) error { Aarakocra.GetRandomFirstAndLastName(cmd);return nil},}
var FemaleAarakocraCommand = &cobra.Command{Use: "female", Short: "Generate names for Dungeons and Dragons species based on female gender",RunE: func(cmd *cobra.Command, args []string) error {speciesPrint.Female = true;Aarakocra.Init();Aarakocra.GetFirstAndLastByGender(speciesPrint);return nil;},}
var MaleAarakocraCommand = &cobra.Command{Use: "male", Short: "Generate names for Dungeons and Dragons species based on male gender",RunE: func(cmd *cobra.Command, args []string) error {speciesPrint.Male = true;Aarakocra.Init();Aarakocra.GetFirstAndLastByGender(speciesPrint);return nil},}
var NonbinaryAarakocraCommand = &cobra.Command{Use: "nonbinary", Short: "Generate names for Dungeons and Dragons species based on nonbinary gender",RunE: func(cmd *cobra.Command, args []string) error {speciesPrint.Nonbinary = true;Aarakocra.Init();Aarakocra.GetFirstAndLastByGender(speciesPrint);return nil},}

// AasimarCommand to handle the logic
var AasimarCommand = &cobra.Command{Use:"aasimar",Short:"Generate names for Dungeons and Dragons species based on the aasimar",RunE: func(cmd *cobra.Command, args []string) error { Aasimar.GetRandomFirstAndLastName(cmd);return nil},}
var FemaleAasimarCommand = &cobra.Command{Use: "female", Short: "Generate names for Dungeons and Dragons species based on female gender",RunE: func(cmd *cobra.Command, args []string) error {speciesPrint.Female = true;Aasimar.Init();Aasimar.GetFirstAndLastByGender(speciesPrint);return nil;},}
var MaleAasimarCommand = &cobra.Command{Use: "male", Short: "Generate names for Dungeons and Dragons species based on male gender",RunE: func(cmd *cobra.Command, args []string) error {speciesPrint.Male = true;Aasimar.Init();Aasimar.GetFirstAndLastByGender(speciesPrint);return nil},}
var NonbinaryAasimarCommand = &cobra.Command{Use: "nonbinary", Short: "Generate names for Dungeons and Dragons species based on nonbinary gender",RunE: func(cmd *cobra.Command, args []string) error {speciesPrint.Nonbinary = true;Aasimar.Init();Aasimar.GetFirstAndLastByGender(speciesPrint);return nil},}

// AutognomeCommand to handle the logic
var AutognomeCommand = &cobra.Command{Use:"autognome",Short:"Generate names for Dungeons and Dragons species based on the autognome",RunE: func(cmd *cobra.Command, args []string) error { Autognome.GetRandomFirstAndLastName(cmd);return nil},}
var FemaleAutognomeCommand = &cobra.Command{Use: "female", Short: "Generate names for Dungeons and Dragons species based on female gender",RunE: func(cmd *cobra.Command, args []string) error {speciesPrint.Female = true;Autognome.Init();Autognome.GetFirstAndLastByGender(speciesPrint);return nil;},}
var MaleAutognomeCommand = &cobra.Command{Use: "male", Short: "Generate names for Dungeons and Dragons species based on male gender",RunE: func(cmd *cobra.Command, args []string) error {speciesPrint.Male = true;Autognome.Init();Autognome.GetFirstAndLastByGender(speciesPrint);return nil},}
var NonbinaryAutognomeCommand = &cobra.Command{Use: "nonbinary", Short: "Generate names for Dungeons and Dragons species based on nonbinary gender",RunE: func(cmd *cobra.Command, args []string) error {speciesPrint.Nonbinary = true;Autognome.Init();Autognome.GetFirstAndLastByGender(speciesPrint);return nil},}

// BugbearCommand to handle the logic
var BugbearCommand = &cobra.Command{Use:"bugbear",Short:"Generate names for Dungeons and Dragons species based on the bugbear",RunE: func(cmd *cobra.Command, args []string) error { Bugbear.GetRandomFirstAndLastName(cmd);return nil},}
var FemaleBugbearCommand = &cobra.Command{Use: "female", Short: "Generate names for Dungeons and Dragons species based on female gender",RunE: func(cmd *cobra.Command, args []string) error {speciesPrint.Female = true;Bugbear.Init();Bugbear.GetFirstAndLastByGender(speciesPrint);return nil;},}
var MaleBugbearCommand = &cobra.Command{Use: "male", Short: "Generate names for Dungeons and Dragons species based on male gender",RunE: func(cmd *cobra.Command, args []string) error {speciesPrint.Male = true;Bugbear.Init();Bugbear.GetFirstAndLastByGender(speciesPrint);return nil},}
var NonbinaryBugbearCommand = &cobra.Command{Use: "nonbinary", Short: "Generate names for Dungeons and Dragons species based on nonbinary gender",RunE: func(cmd *cobra.Command, args []string) error {speciesPrint.Nonbinary = true;Bugbear.Init();Bugbear.GetFirstAndLastByGender(speciesPrint);return nil},}

// CentaurCommand to handle the logic
var CentaurCommand = &cobra.Command{Use:"centaur",Short:"Generate names for Dungeons and Dragons species based on the centaur",RunE: func(cmd *cobra.Command, args []string) error { Centaur.GetRandomFirstAndLastName(cmd);return nil},}
var FemaleCentaurCommand = &cobra.Command{Use: "female", Short: "Generate names for Dungeons and Dragons species based on female gender",RunE: func(cmd *cobra.Command, args []string) error {speciesPrint.Female = true;Centaur.Init();Centaur.GetFirstAndLastByGender(speciesPrint);return nil;},}
var MaleCentaurCommand = &cobra.Command{Use: "male", Short: "Generate names for Dungeons and Dragons species based on male gender",RunE: func(cmd *cobra.Command, args []string) error {speciesPrint.Male = true;Centaur.Init();Centaur.GetFirstAndLastByGender(speciesPrint);return nil},}
var NonbinaryCentaurCommand = &cobra.Command{Use: "nonbinary", Short: "Generate names for Dungeons and Dragons species based on nonbinary gender",RunE: func(cmd *cobra.Command, args []string) error {speciesPrint.Nonbinary = true;Centaur.Init();Centaur.GetFirstAndLastByGender(speciesPrint);return nil},}

// ChangelingCommand to handle the logic
var ChangelingCommand = &cobra.Command{Use:"changeling",Short:"Generate names for Dungeons and Dragons species based on the changeling",RunE: func(cmd *cobra.Command, args []string) error { Changeling.GetRandomFirstAndLastName(cmd);return nil},}
var FemaleChangelingCommand = &cobra.Command{Use: "female", Short: "Generate names for Dungeons and Dragons species based on female gender",RunE: func(cmd *cobra.Command, args []string) error {speciesPrint.Female = true;Changeling.Init();Changeling.GetFirstAndLastByGender(speciesPrint);return nil;},}
var MaleChangelingCommand = &cobra.Command{Use: "male", Short: "Generate names for Dungeons and Dragons species based on male gender",RunE: func(cmd *cobra.Command, args []string) error {speciesPrint.Male = true;Changeling.Init();Changeling.GetFirstAndLastByGender(speciesPrint);return nil},}
var NonbinaryChangelingCommand = &cobra.Command{Use: "nonbinary", Short: "Generate names for Dungeons and Dragons species based on nonbinary gender",RunE: func(cmd *cobra.Command, args []string) error {speciesPrint.Nonbinary = true;Changeling.Init();Changeling.GetFirstAndLastByGender(speciesPrint);return nil},}

// DhampirCommand to handle the logic
var DhampirCommand = &cobra.Command{Use:"dhampir",Short:"Generate names for Dungeons and Dragons species based on the dhampir",RunE: func(cmd *cobra.Command, args []string) error { Dhampir.GetRandomFirstAndLastName(cmd);return nil},}
var FemaleDhampirCommand = &cobra.Command{Use: "female", Short: "Generate names for Dungeons and Dragons species based on female gender",RunE: func(cmd *cobra.Command, args []string) error {speciesPrint.Female = true;Dhampir.Init();Dhampir.GetFirstAndLastByGender(speciesPrint);return nil;},}
var MaleDhampirCommand = &cobra.Command{Use: "male", Short: "Generate names for Dungeons and Dragons species based on male gender",RunE: func(cmd *cobra.Command, args []string) error {speciesPrint.Male = true;Dhampir.Init();Dhampir.GetFirstAndLastByGender(speciesPrint);return nil},}
var NonbinaryDhampirCommand = &cobra.Command{Use: "nonbinary", Short: "Generate names for Dungeons and Dragons species based on nonbinary gender",RunE: func(cmd *cobra.Command, args []string) error {speciesPrint.Nonbinary = true;Dhampir.Init();Dhampir.GetFirstAndLastByGender(speciesPrint);return nil},}

// DragonbornCommand to handle the logic
var DragonbornCommand = &cobra.Command{Use:"dragonborn",Short:"Generate names for Dungeons and Dragons species based on the dragonborn",RunE: func(cmd *cobra.Command, args []string) error { Dragonborn.GetRandomFirstAndLastName(cmd);return nil},}
var FemaleDragonbornCommand = &cobra.Command{Use: "female", Short: "Generate names for Dungeons and Dragons species based on female gender",RunE: func(cmd *cobra.Command, args []string) error {speciesPrint.Female = true;Dragonborn.Init();Dragonborn.GetFirstAndLastByGender(speciesPrint);return nil;},}
var MaleDragonbornCommand = &cobra.Command{Use: "male", Short: "Generate names for Dungeons and Dragons species based on male gender",RunE: func(cmd *cobra.Command, args []string) error {speciesPrint.Male = true;Dragonborn.Init();Dragonborn.GetFirstAndLastByGender(speciesPrint);return nil},}
var NonbinaryDragonbornCommand = &cobra.Command{Use: "nonbinary", Short: "Generate names for Dungeons and Dragons species based on nonbinary gender",RunE: func(cmd *cobra.Command, args []string) error {speciesPrint.Nonbinary = true;Dragonborn.Init();Dragonborn.GetFirstAndLastByGender(speciesPrint);return nil},}

// DwarfCommand to handle the logic
var DwarfCommand = &cobra.Command{Use:"dwarf",Short:"Generate names for Dungeons and Dragons species based on the dwarf",RunE: func(cmd *cobra.Command, args []string) error { Dwarf.GetRandomFirstAndLastName(cmd);return nil},}
var FemaleDwarfCommand = &cobra.Command{Use: "female", Short: "Generate names for Dungeons and Dragons species based on female gender",RunE: func(cmd *cobra.Command, args []string) error {speciesPrint.Female = true;Dwarf.Init();Dwarf.GetFirstAndLastByGender(speciesPrint);return nil;},}
var MaleDwarfCommand = &cobra.Command{Use: "male", Short: "Generate names for Dungeons and Dragons species based on male gender",RunE: func(cmd *cobra.Command, args []string) error {speciesPrint.Male = true;Dwarf.Init();Dwarf.GetFirstAndLastByGender(speciesPrint);return nil},}
var NonbinaryDwarfCommand = &cobra.Command{Use: "nonbinary", Short: "Generate names for Dungeons and Dragons species based on nonbinary gender",RunE: func(cmd *cobra.Command, args []string) error {speciesPrint.Nonbinary = true;Dwarf.Init();Dwarf.GetFirstAndLastByGender(speciesPrint);return nil},}

// ElfCommand to handle the logic
var ElfCommand = &cobra.Command{Use:"elf",Short:"Generate names for Dungeons and Dragons species based on the elf",RunE: func(cmd *cobra.Command, args []string) error { Elf.GetRandomFirstAndLastName(cmd);return nil},}
var FemaleElfCommand = &cobra.Command{Use: "female", Short: "Generate names for Dungeons and Dragons species based on female gender",RunE: func(cmd *cobra.Command, args []string) error {speciesPrint.Female = true;Elf.Init();Elf.GetFirstAndLastByGender(speciesPrint);return nil;},}
var MaleElfCommand = &cobra.Command{Use: "male", Short: "Generate names for Dungeons and Dragons species based on male gender",RunE: func(cmd *cobra.Command, args []string) error {speciesPrint.Male = true;Elf.Init();Elf.GetFirstAndLastByGender(speciesPrint);return nil},}
var NonbinaryElfCommand = &cobra.Command{Use: "nonbinary", Short: "Generate names for Dungeons and Dragons species based on nonbinary gender",RunE: func(cmd *cobra.Command, args []string) error {speciesPrint.Nonbinary = true;Elf.Init();Elf.GetFirstAndLastByGender(speciesPrint);return nil},}

// FairyCommand to handle the logic
var FairyCommand = &cobra.Command{Use:"fairy",Short:"Generate names for Dungeons and Dragons species based on the fairy",RunE: func(cmd *cobra.Command, args []string) error { Fairy.GetRandomFirstAndLastName(cmd);return nil},}
var FemaleFairyCommand = &cobra.Command{Use: "female", Short: "Generate names for Dungeons and Dragons species based on female gender",RunE: func(cmd *cobra.Command, args []string) error {speciesPrint.Female = true;Fairy.Init();Fairy.GetFirstAndLastByGender(speciesPrint);return nil;},}
var MaleFairyCommand = &cobra.Command{Use: "male", Short: "Generate names for Dungeons and Dragons species based on male gender",RunE: func(cmd *cobra.Command, args []string) error {speciesPrint.Male = true;Fairy.Init();Fairy.GetFirstAndLastByGender(speciesPrint);return nil},}
var NonbinaryFairyCommand = &cobra.Command{Use: "nonbinary", Short: "Generate names for Dungeons and Dragons species based on nonbinary gender",RunE: func(cmd *cobra.Command, args []string) error {speciesPrint.Nonbinary = true;Fairy.Init();Fairy.GetFirstAndLastByGender(speciesPrint);return nil},}

// FirbolgCommand to handle the logic
var FirbolgCommand = &cobra.Command{Use:"firbolg",Short:"Generate names for Dungeons and Dragons species based on the firbolg",RunE: func(cmd *cobra.Command, args []string) error { Firbolg.GetRandomFirstAndLastName(cmd);return nil},}
var FemaleFirbolgCommand = &cobra.Command{Use: "female", Short: "Generate names for Dungeons and Dragons species based on female gender",RunE: func(cmd *cobra.Command, args []string) error {speciesPrint.Female = true;Firbolg.Init();Firbolg.GetFirstAndLastByGender(speciesPrint);return nil;},}
var MaleFirbolgCommand = &cobra.Command{Use: "male", Short: "Generate names for Dungeons and Dragons species based on male gender",RunE: func(cmd *cobra.Command, args []string) error {speciesPrint.Male = true;Firbolg.Init();Firbolg.GetFirstAndLastByGender(speciesPrint);return nil},}
var NonbinaryFirbolgCommand = &cobra.Command{Use: "nonbinary", Short: "Generate names for Dungeons and Dragons species based on nonbinary gender",RunE: func(cmd *cobra.Command, args []string) error {speciesPrint.Nonbinary = true;Firbolg.Init();Firbolg.GetFirstAndLastByGender(speciesPrint);return nil},}

// GenasiCommand to handle the logic
var GenasiCommand = &cobra.Command{Use:"genasi",Short:"Generate names for Dungeons and Dragons species based on the genasi",RunE: func(cmd *cobra.Command, args []string) error { Genasi.GetRandomFirstAndLastName(cmd);return nil},}
var FemaleGenasiCommand = &cobra.Command{Use: "female", Short: "Generate names for Dungeons and Dragons species based on female gender",RunE: func(cmd *cobra.Command, args []string) error {speciesPrint.Female = true;Genasi.Init();Genasi.GetFirstAndLastByGender(speciesPrint);return nil;},}
var MaleGenasiCommand = &cobra.Command{Use: "male", Short: "Generate names for Dungeons and Dragons species based on male gender",RunE: func(cmd *cobra.Command, args []string) error {speciesPrint.Male = true;Genasi.Init();Genasi.GetFirstAndLastByGender(speciesPrint);return nil},}
var NonbinaryGenasiCommand = &cobra.Command{Use: "nonbinary", Short: "Generate names for Dungeons and Dragons species based on nonbinary gender",RunE: func(cmd *cobra.Command, args []string) error {speciesPrint.Nonbinary = true;Genasi.Init();Genasi.GetFirstAndLastByGender(speciesPrint);return nil},}

// GiffCommand to handle the logic
var GiffCommand = &cobra.Command{Use:"giff",Short:"Generate names for Dungeons and Dragons species based on the giff",RunE: func(cmd *cobra.Command, args []string) error { Giff.GetRandomFirstAndLastName(cmd);return nil},}
var FemaleGiffCommand = &cobra.Command{Use: "female", Short: "Generate names for Dungeons and Dragons species based on female gender",RunE: func(cmd *cobra.Command, args []string) error {speciesPrint.Female = true;Giff.Init();Giff.GetFirstAndLastByGender(speciesPrint);return nil;},}
var MaleGiffCommand = &cobra.Command{Use: "male", Short: "Generate names for Dungeons and Dragons species based on male gender",RunE: func(cmd *cobra.Command, args []string) error {speciesPrint.Male = true;Giff.Init();Giff.GetFirstAndLastByGender(speciesPrint);return nil},}
var NonbinaryGiffCommand = &cobra.Command{Use: "nonbinary", Short: "Generate names for Dungeons and Dragons species based on nonbinary gender",RunE: func(cmd *cobra.Command, args []string) error {speciesPrint.Nonbinary = true;Giff.Init();Giff.GetFirstAndLastByGender(speciesPrint);return nil},}

// GithCommand to handle the logic
var GithCommand = &cobra.Command{Use:"gith",Short:"Generate names for Dungeons and Dragons species based on the gith",RunE: func(cmd *cobra.Command, args []string) error { Gith.GetRandomFirstAndLastName(cmd);return nil},}
var FemaleGithCommand = &cobra.Command{Use: "female", Short: "Generate names for Dungeons and Dragons species based on female gender",RunE: func(cmd *cobra.Command, args []string) error {speciesPrint.Female = true;Gith.Init();Gith.GetFirstAndLastByGender(speciesPrint);return nil;},}
var MaleGithCommand = &cobra.Command{Use: "male", Short: "Generate names for Dungeons and Dragons species based on male gender",RunE: func(cmd *cobra.Command, args []string) error {speciesPrint.Male = true;Gith.Init();Gith.GetFirstAndLastByGender(speciesPrint);return nil},}
var NonbinaryGithCommand = &cobra.Command{Use: "nonbinary", Short: "Generate names for Dungeons and Dragons species based on nonbinary gender",RunE: func(cmd *cobra.Command, args []string) error {speciesPrint.Nonbinary = true;Gith.Init();Gith.GetFirstAndLastByGender(speciesPrint);return nil},}

// GnomeCommand to handle the logic
var GnomeCommand = &cobra.Command{Use:"gnome",Short:"Generate names for Dungeons and Dragons species based on the gnome",RunE: func(cmd *cobra.Command, args []string) error { Gnome.GetRandomFirstAndLastName(cmd);return nil},}
var FemaleGnomeCommand = &cobra.Command{Use: "female", Short: "Generate names for Dungeons and Dragons species based on female gender",RunE: func(cmd *cobra.Command, args []string) error {speciesPrint.Female = true;Gnome.Init();Gnome.GetFirstAndLastByGender(speciesPrint);return nil;},}
var MaleGnomeCommand = &cobra.Command{Use: "male", Short: "Generate names for Dungeons and Dragons species based on male gender",RunE: func(cmd *cobra.Command, args []string) error {speciesPrint.Male = true;Gnome.Init();Gnome.GetFirstAndLastByGender(speciesPrint);return nil},}
var NonbinaryGnomeCommand = &cobra.Command{Use: "nonbinary", Short: "Generate names for Dungeons and Dragons species based on nonbinary gender",RunE: func(cmd *cobra.Command, args []string) error {speciesPrint.Nonbinary = true;Gnome.Init();Gnome.GetFirstAndLastByGender(speciesPrint);return nil},}

// GoblinCommand to handle the logic
var GoblinCommand = &cobra.Command{Use:"goblin",Short:"Generate names for Dungeons and Dragons species based on the goblin",RunE: func(cmd *cobra.Command, args []string) error { Goblin.GetRandomFirstAndLastName(cmd);return nil},}
var FemaleGoblinCommand = &cobra.Command{Use: "female", Short: "Generate names for Dungeons and Dragons species based on female gender",RunE: func(cmd *cobra.Command, args []string) error {speciesPrint.Female = true;Goblin.Init();Goblin.GetFirstAndLastByGender(speciesPrint);return nil;},}
var MaleGoblinCommand = &cobra.Command{Use: "male", Short: "Generate names for Dungeons and Dragons species based on male gender",RunE: func(cmd *cobra.Command, args []string) error {speciesPrint.Male = true;Goblin.Init();Goblin.GetFirstAndLastByGender(speciesPrint);return nil},}
var NonbinaryGoblinCommand = &cobra.Command{Use: "nonbinary", Short: "Generate names for Dungeons and Dragons species based on nonbinary gender",RunE: func(cmd *cobra.Command, args []string) error {speciesPrint.Nonbinary = true;Goblin.Init();Goblin.GetFirstAndLastByGender(speciesPrint);return nil},}

// GoliathCommand to handle the logic
var GoliathCommand = &cobra.Command{Use:"goliath",Short:"Generate names for Dungeons and Dragons species based on the goliath",RunE: func(cmd *cobra.Command, args []string) error { Goliath.GetRandomFirstAndLastName(cmd);return nil},}
var FemaleGoliathCommand = &cobra.Command{Use: "female", Short: "Generate names for Dungeons and Dragons species based on female gender",RunE: func(cmd *cobra.Command, args []string) error {speciesPrint.Female = true;Goliath.Init();Goliath.GetFirstAndLastByGender(speciesPrint);return nil;},}
var MaleGoliathCommand = &cobra.Command{Use: "male", Short: "Generate names for Dungeons and Dragons species based on male gender",RunE: func(cmd *cobra.Command, args []string) error {speciesPrint.Male = true;Goliath.Init();Goliath.GetFirstAndLastByGender(speciesPrint);return nil},}
var NonbinaryGoliathCommand = &cobra.Command{Use: "nonbinary", Short: "Generate names for Dungeons and Dragons species based on nonbinary gender",RunE: func(cmd *cobra.Command, args []string) error {speciesPrint.Nonbinary = true;Goliath.Init();Goliath.GetFirstAndLastByGender(speciesPrint);return nil},}

// HalfElfCommand to handle the logic
var HalfElfCommand = &cobra.Command{Use:"halfelf",Short:"Generate names for Dungeons and Dragons species based on the halfelf",RunE: func(cmd *cobra.Command, args []string) error { HalfElf.GetRandomFirstAndLastName(cmd);return nil},}
var FemaleHalfElfCommand = &cobra.Command{Use: "female", Short: "Generate names for Dungeons and Dragons species based on female gender",RunE: func(cmd *cobra.Command, args []string) error {speciesPrint.Female = true;HalfElf.Init();HalfElf.GetFirstAndLastByGender(speciesPrint);return nil;},}
var MaleHalfElfCommand = &cobra.Command{Use: "male", Short: "Generate names for Dungeons and Dragons species based on male gender",RunE: func(cmd *cobra.Command, args []string) error {speciesPrint.Male = true;HalfElf.Init();HalfElf.GetFirstAndLastByGender(speciesPrint);return nil},}
var NonbinaryHalfElfCommand = &cobra.Command{Use: "nonbinary", Short: "Generate names for Dungeons and Dragons species based on nonbinary gender",RunE: func(cmd *cobra.Command, args []string) error {speciesPrint.Nonbinary = true;HalfElf.Init();HalfElf.GetFirstAndLastByGender(speciesPrint);return nil},}

// HalfOrcCommand to handle the logic
var HalfOrcCommand = &cobra.Command{Use:"halforc",Short:"Generate names for Dungeons and Dragons species based on the halforc",RunE: func(cmd *cobra.Command, args []string) error { HalfOrc.GetRandomFirstAndLastName(cmd);return nil},}
var FemaleHalfOrcCommand = &cobra.Command{Use: "female", Short: "Generate names for Dungeons and Dragons species based on female gender",RunE: func(cmd *cobra.Command, args []string) error {speciesPrint.Female = true;HalfOrc.Init();HalfOrc.GetFirstAndLastByGender(speciesPrint);return nil;},}
var MaleHalfOrcCommand = &cobra.Command{Use: "male", Short: "Generate names for Dungeons and Dragons species based on male gender",RunE: func(cmd *cobra.Command, args []string) error {speciesPrint.Male = true;HalfOrc.Init();HalfOrc.GetFirstAndLastByGender(speciesPrint);return nil},}
var NonbinaryHalfOrcCommand = &cobra.Command{Use: "nonbinary", Short: "Generate names for Dungeons and Dragons species based on nonbinary gender",RunE: func(cmd *cobra.Command, args []string) error {speciesPrint.Nonbinary = true;HalfOrc.Init();HalfOrc.GetFirstAndLastByGender(speciesPrint);return nil},}

// HalflingCommand to handle the logic
var HalflingCommand = &cobra.Command{Use:"halfling",Short:"Generate names for Dungeons and Dragons species based on the halfling",RunE: func(cmd *cobra.Command, args []string) error { Halfling.GetRandomFirstAndLastName(cmd);return nil},}
var FemaleHalflingCommand = &cobra.Command{Use: "female", Short: "Generate names for Dungeons and Dragons species based on female gender",RunE: func(cmd *cobra.Command, args []string) error {speciesPrint.Female = true;Halfling.Init();Halfling.GetFirstAndLastByGender(speciesPrint);return nil;},}
var MaleHalflingCommand = &cobra.Command{Use: "male", Short: "Generate names for Dungeons and Dragons species based on male gender",RunE: func(cmd *cobra.Command, args []string) error {speciesPrint.Male = true;Halfling.Init();Halfling.GetFirstAndLastByGender(speciesPrint);return nil},}
var NonbinaryHalflingCommand = &cobra.Command{Use: "nonbinary", Short: "Generate names for Dungeons and Dragons species based on nonbinary gender",RunE: func(cmd *cobra.Command, args []string) error {speciesPrint.Nonbinary = true;Halfling.Init();Halfling.GetFirstAndLastByGender(speciesPrint);return nil},}

// HarengonCommand to handle the logic
var HarengonCommand = &cobra.Command{Use:"harengon",Short:"Generate names for Dungeons and Dragons species based on the harengon",RunE: func(cmd *cobra.Command, args []string) error { Harengon.GetRandomFirstAndLastName(cmd);return nil},}
var FemaleHarengonCommand = &cobra.Command{Use: "female", Short: "Generate names for Dungeons and Dragons species based on female gender",RunE: func(cmd *cobra.Command, args []string) error {speciesPrint.Female = true;Harengon.Init();Harengon.GetFirstAndLastByGender(speciesPrint);return nil;},}
var MaleHarengonCommand = &cobra.Command{Use: "male", Short: "Generate names for Dungeons and Dragons species based on male gender",RunE: func(cmd *cobra.Command, args []string) error {speciesPrint.Male = true;Harengon.Init();Harengon.GetFirstAndLastByGender(speciesPrint);return nil},}
var NonbinaryHarengonCommand = &cobra.Command{Use: "nonbinary", Short: "Generate names for Dungeons and Dragons species based on nonbinary gender",RunE: func(cmd *cobra.Command, args []string) error {speciesPrint.Nonbinary = true;Harengon.Init();Harengon.GetFirstAndLastByGender(speciesPrint);return nil},}

// HexbloodCommand to handle the logic
var HexbloodCommand = &cobra.Command{Use:"hexblood",Short:"Generate names for Dungeons and Dragons species based on the hexblood",RunE: func(cmd *cobra.Command, args []string) error { Hexblood.GetRandomFirstAndLastName(cmd);return nil},}
var FemaleHexbloodCommand = &cobra.Command{Use: "female", Short: "Generate names for Dungeons and Dragons species based on female gender",RunE: func(cmd *cobra.Command, args []string) error {speciesPrint.Female = true;Hexblood.Init();Hexblood.GetFirstAndLastByGender(speciesPrint);return nil;},}
var MaleHexbloodCommand = &cobra.Command{Use: "male", Short: "Generate names for Dungeons and Dragons species based on male gender",RunE: func(cmd *cobra.Command, args []string) error {speciesPrint.Male = true;Hexblood.Init();Hexblood.GetFirstAndLastByGender(speciesPrint);return nil},}
var NonbinaryHexbloodCommand = &cobra.Command{Use: "nonbinary", Short: "Generate names for Dungeons and Dragons species based on nonbinary gender",RunE: func(cmd *cobra.Command, args []string) error {speciesPrint.Nonbinary = true;Hexblood.Init();Hexblood.GetFirstAndLastByGender(speciesPrint);return nil},}

// HobgoblinCommand to handle the logic
var HobgoblinCommand = &cobra.Command{Use:"hobgoblin",Short:"Generate names for Dungeons and Dragons species based on the hobgoblin",RunE: func(cmd *cobra.Command, args []string) error { Hobgoblin.GetRandomFirstAndLastName(cmd);return nil},}
var FemaleHobgoblinCommand = &cobra.Command{Use: "female", Short: "Generate names for Dungeons and Dragons species based on female gender",RunE: func(cmd *cobra.Command, args []string) error {speciesPrint.Female = true;Hobgoblin.Init();Hobgoblin.GetFirstAndLastByGender(speciesPrint);return nil;},}
var MaleHobgoblinCommand = &cobra.Command{Use: "male", Short: "Generate names for Dungeons and Dragons species based on male gender",RunE: func(cmd *cobra.Command, args []string) error {speciesPrint.Male = true;Hobgoblin.Init();Hobgoblin.GetFirstAndLastByGender(speciesPrint);return nil},}
var NonbinaryHobgoblinCommand = &cobra.Command{Use: "nonbinary", Short: "Generate names for Dungeons and Dragons species based on nonbinary gender",RunE: func(cmd *cobra.Command, args []string) error {speciesPrint.Nonbinary = true;Hobgoblin.Init();Hobgoblin.GetFirstAndLastByGender(speciesPrint);return nil},}

// HumanCommand to handle the logic
var HumanCommand = &cobra.Command{Use:"human",Short:"Generate names for Dungeons and Dragons species based on the human",RunE: func(cmd *cobra.Command, args []string) error { Human.GetRandomFirstAndLastName(cmd);return nil},}
var FemaleHumanCommand = &cobra.Command{Use: "female", Short: "Generate names for Dungeons and Dragons species based on female gender",RunE: func(cmd *cobra.Command, args []string) error {speciesPrint.Female = true;Human.Init();Human.GetFirstAndLastByGender(speciesPrint);return nil;},}
var MaleHumanCommand = &cobra.Command{Use: "male", Short: "Generate names for Dungeons and Dragons species based on male gender",RunE: func(cmd *cobra.Command, args []string) error {speciesPrint.Male = true;Human.Init();Human.GetFirstAndLastByGender(speciesPrint);return nil},}
var NonbinaryHumanCommand = &cobra.Command{Use: "nonbinary", Short: "Generate names for Dungeons and Dragons species based on nonbinary gender",RunE: func(cmd *cobra.Command, args []string) error {speciesPrint.Nonbinary = true;Human.Init();Human.GetFirstAndLastByGender(speciesPrint);return nil},}

// KalashtarCommand to handle the logic
var KalashtarCommand = &cobra.Command{Use:"kalashtar",Short:"Generate names for Dungeons and Dragons species based on the kalashtar",RunE: func(cmd *cobra.Command, args []string) error { Kalashtar.GetRandomFirstAndLastName(cmd);return nil},}
var FemaleKalashtarCommand = &cobra.Command{Use: "female", Short: "Generate names for Dungeons and Dragons species based on female gender",RunE: func(cmd *cobra.Command, args []string) error {speciesPrint.Female = true;Kalashtar.Init();Kalashtar.GetFirstAndLastByGender(speciesPrint);return nil;},}
var MaleKalashtarCommand = &cobra.Command{Use: "male", Short: "Generate names for Dungeons and Dragons species based on male gender",RunE: func(cmd *cobra.Command, args []string) error {speciesPrint.Male = true;Kalashtar.Init();Kalashtar.GetFirstAndLastByGender(speciesPrint);return nil},}
var NonbinaryKalashtarCommand = &cobra.Command{Use: "nonbinary", Short: "Generate names for Dungeons and Dragons species based on nonbinary gender",RunE: func(cmd *cobra.Command, args []string) error {speciesPrint.Nonbinary = true;Kalashtar.Init();Kalashtar.GetFirstAndLastByGender(speciesPrint);return nil},}

// KenderCommand to handle the logic
var KenderCommand = &cobra.Command{Use:"kender",Short:"Generate names for Dungeons and Dragons species based on the kender",RunE: func(cmd *cobra.Command, args []string) error { Kender.GetRandomFirstAndLastName(cmd);return nil},}
var FemaleKenderCommand = &cobra.Command{Use: "female", Short: "Generate names for Dungeons and Dragons species based on female gender",RunE: func(cmd *cobra.Command, args []string) error {speciesPrint.Female = true;Kender.Init();Kender.GetFirstAndLastByGender(speciesPrint);return nil;},}
var MaleKenderCommand = &cobra.Command{Use: "male", Short: "Generate names for Dungeons and Dragons species based on male gender",RunE: func(cmd *cobra.Command, args []string) error {speciesPrint.Male = true;Kender.Init();Kender.GetFirstAndLastByGender(speciesPrint);return nil},}
var NonbinaryKenderCommand = &cobra.Command{Use: "nonbinary", Short: "Generate names for Dungeons and Dragons species based on nonbinary gender",RunE: func(cmd *cobra.Command, args []string) error {speciesPrint.Nonbinary = true;Kender.Init();Kender.GetFirstAndLastByGender(speciesPrint);return nil},}

// KenkuCommand to handle the logic
var KenkuCommand = &cobra.Command{Use:"kenku",Short:"Generate names for Dungeons and Dragons species based on the kenku",RunE: func(cmd *cobra.Command, args []string) error { Kenku.GetRandomFirstAndLastName(cmd);return nil},}
var FemaleKenkuCommand = &cobra.Command{Use: "female", Short: "Generate names for Dungeons and Dragons species based on female gender",RunE: func(cmd *cobra.Command, args []string) error {speciesPrint.Female = true;Kenku.Init();Kenku.GetFirstAndLastByGender(speciesPrint);return nil;},}
var MaleKenkuCommand = &cobra.Command{Use: "male", Short: "Generate names for Dungeons and Dragons species based on male gender",RunE: func(cmd *cobra.Command, args []string) error {speciesPrint.Male = true;Kenku.Init();Kenku.GetFirstAndLastByGender(speciesPrint);return nil},}
var NonbinaryKenkuCommand = &cobra.Command{Use: "nonbinary", Short: "Generate names for Dungeons and Dragons species based on nonbinary gender",RunE: func(cmd *cobra.Command, args []string) error {speciesPrint.Nonbinary = true;Kenku.Init();Kenku.GetFirstAndLastByGender(speciesPrint);return nil},}

// KoboldCommand to handle the logic
var KoboldCommand = &cobra.Command{Use:"kobold",Short:"Generate names for Dungeons and Dragons species based on the kobold",RunE: func(cmd *cobra.Command, args []string) error { Kobold.GetRandomFirstAndLastName(cmd);return nil},}
var FemaleKoboldCommand = &cobra.Command{Use: "female", Short: "Generate names for Dungeons and Dragons species based on female gender",RunE: func(cmd *cobra.Command, args []string) error {speciesPrint.Female = true;Kobold.Init();Kobold.GetFirstAndLastByGender(speciesPrint);return nil;},}
var MaleKoboldCommand = &cobra.Command{Use: "male", Short: "Generate names for Dungeons and Dragons species based on male gender",RunE: func(cmd *cobra.Command, args []string) error {speciesPrint.Male = true;Kobold.Init();Kobold.GetFirstAndLastByGender(speciesPrint);return nil},}
var NonbinaryKoboldCommand = &cobra.Command{Use: "nonbinary", Short: "Generate names for Dungeons and Dragons species based on nonbinary gender",RunE: func(cmd *cobra.Command, args []string) error {speciesPrint.Nonbinary = true;Kobold.Init();Kobold.GetFirstAndLastByGender(speciesPrint);return nil},}

// LeoninCommand to handle the logic
var LeoninCommand = &cobra.Command{Use:"leonin",Short:"Generate names for Dungeons and Dragons species based on the leonin",RunE: func(cmd *cobra.Command, args []string) error { Leonin.GetRandomFirstAndLastName(cmd);return nil},}
var FemaleLeoninCommand = &cobra.Command{Use: "female", Short: "Generate names for Dungeons and Dragons species based on female gender",RunE: func(cmd *cobra.Command, args []string) error {speciesPrint.Female = true;Leonin.Init();Leonin.GetFirstAndLastByGender(speciesPrint);return nil;},}
var MaleLeoninCommand = &cobra.Command{Use: "male", Short: "Generate names for Dungeons and Dragons species based on male gender",RunE: func(cmd *cobra.Command, args []string) error {speciesPrint.Male = true;Leonin.Init();Leonin.GetFirstAndLastByGender(speciesPrint);return nil},}
var NonbinaryLeoninCommand = &cobra.Command{Use: "nonbinary", Short: "Generate names for Dungeons and Dragons species based on nonbinary gender",RunE: func(cmd *cobra.Command, args []string) error {speciesPrint.Nonbinary = true;Leonin.Init();Leonin.GetFirstAndLastByGender(speciesPrint);return nil},}

// LexodonCommand to handle the logic
var LexodonCommand = &cobra.Command{Use:"lexodon",Short:"Generate names for Dungeons and Dragons species based on the lexodon",RunE: func(cmd *cobra.Command, args []string) error { Lexodon.GetRandomFirstAndLastName(cmd);return nil},}
var FemaleLexodonCommand = &cobra.Command{Use: "female", Short: "Generate names for Dungeons and Dragons species based on female gender",RunE: func(cmd *cobra.Command, args []string) error {speciesPrint.Female = true;Lexodon.Init();Lexodon.GetFirstAndLastByGender(speciesPrint);return nil;},}
var MaleLexodonCommand = &cobra.Command{Use: "male", Short: "Generate names for Dungeons and Dragons species based on male gender",RunE: func(cmd *cobra.Command, args []string) error {speciesPrint.Male = true;Lexodon.Init();Lexodon.GetFirstAndLastByGender(speciesPrint);return nil},}
var NonbinaryLexodonCommand = &cobra.Command{Use: "nonbinary", Short: "Generate names for Dungeons and Dragons species based on nonbinary gender",RunE: func(cmd *cobra.Command, args []string) error {speciesPrint.Nonbinary = true;Lexodon.Init();Lexodon.GetFirstAndLastByGender(speciesPrint);return nil},}

// LizardfolkCommand to handle the logic
var LizardfolkCommand = &cobra.Command{Use:"lizardfolk",Short:"Generate names for Dungeons and Dragons species based on the lizardfolk",RunE: func(cmd *cobra.Command, args []string) error { Lizardfolk.GetRandomFirstAndLastName(cmd);return nil},}
var FemaleLizardfolkCommand = &cobra.Command{Use: "female", Short: "Generate names for Dungeons and Dragons species based on female gender",RunE: func(cmd *cobra.Command, args []string) error {speciesPrint.Female = true;Lizardfolk.Init();Lizardfolk.GetFirstAndLastByGender(speciesPrint);return nil;},}
var MaleLizardfolkCommand = &cobra.Command{Use: "male", Short: "Generate names for Dungeons and Dragons species based on male gender",RunE: func(cmd *cobra.Command, args []string) error {speciesPrint.Male = true;Lizardfolk.Init();Lizardfolk.GetFirstAndLastByGender(speciesPrint);return nil},}
var NonbinaryLizardfolkCommand = &cobra.Command{Use: "nonbinary", Short: "Generate names for Dungeons and Dragons species based on nonbinary gender",RunE: func(cmd *cobra.Command, args []string) error {speciesPrint.Nonbinary = true;Lizardfolk.Init();Lizardfolk.GetFirstAndLastByGender(speciesPrint);return nil},}

// MinotaurCommand to handle the logic
var MinotaurCommand = &cobra.Command{Use:"minotaur",Short:"Generate names for Dungeons and Dragons species based on the minotaur",RunE: func(cmd *cobra.Command, args []string) error { Minotaur.GetRandomFirstAndLastName(cmd);return nil},}
var FemaleMinotaurCommand = &cobra.Command{Use: "female", Short: "Generate names for Dungeons and Dragons species based on female gender",RunE: func(cmd *cobra.Command, args []string) error {speciesPrint.Female = true;Minotaur.Init();Minotaur.GetFirstAndLastByGender(speciesPrint);return nil;},}
var MaleMinotaurCommand = &cobra.Command{Use: "male", Short: "Generate names for Dungeons and Dragons species based on male gender",RunE: func(cmd *cobra.Command, args []string) error {speciesPrint.Male = true;Minotaur.Init();Minotaur.GetFirstAndLastByGender(speciesPrint);return nil},}
var NonbinaryMinotaurCommand = &cobra.Command{Use: "nonbinary", Short: "Generate names for Dungeons and Dragons species based on nonbinary gender",RunE: func(cmd *cobra.Command, args []string) error {speciesPrint.Nonbinary = true;Minotaur.Init();Minotaur.GetFirstAndLastByGender(speciesPrint);return nil},}

// OrcCommand to handle the logic
var OrcCommand = &cobra.Command{Use:"orc",Short:"Generate names for Dungeons and Dragons species based on the orc",RunE: func(cmd *cobra.Command, args []string) error { Orc.GetRandomFirstAndLastName(cmd);return nil},}
var FemaleOrcCommand = &cobra.Command{Use: "female", Short: "Generate names for Dungeons and Dragons species based on female gender",RunE: func(cmd *cobra.Command, args []string) error {speciesPrint.Female = true;Orc.Init();Orc.GetFirstAndLastByGender(speciesPrint);return nil;},}
var MaleOrcCommand = &cobra.Command{Use: "male", Short: "Generate names for Dungeons and Dragons species based on male gender",RunE: func(cmd *cobra.Command, args []string) error {speciesPrint.Male = true;Orc.Init();Orc.GetFirstAndLastByGender(speciesPrint);return nil},}
var NonbinaryOrcCommand = &cobra.Command{Use: "nonbinary", Short: "Generate names for Dungeons and Dragons species based on nonbinary gender",RunE: func(cmd *cobra.Command, args []string) error {speciesPrint.Nonbinary = true;Orc.Init();Orc.GetFirstAndLastByGender(speciesPrint);return nil},}

// OwlinCommand to handle the logic
var OwlinCommand = &cobra.Command{Use:"owlin",Short:"Generate names for Dungeons and Dragons species based on the owlin",RunE: func(cmd *cobra.Command, args []string) error { Owlin.GetRandomFirstAndLastName(cmd);return nil},}
var FemaleOwlinCommand = &cobra.Command{Use: "female", Short: "Generate names for Dungeons and Dragons species based on female gender",RunE: func(cmd *cobra.Command, args []string) error {speciesPrint.Female = true;Owlin.Init();Owlin.GetFirstAndLastByGender(speciesPrint);return nil;},}
var MaleOwlinCommand = &cobra.Command{Use: "male", Short: "Generate names for Dungeons and Dragons species based on male gender",RunE: func(cmd *cobra.Command, args []string) error {speciesPrint.Male = true;Owlin.Init();Owlin.GetFirstAndLastByGender(speciesPrint);return nil},}
var NonbinaryOwlinCommand = &cobra.Command{Use: "nonbinary", Short: "Generate names for Dungeons and Dragons species based on nonbinary gender",RunE: func(cmd *cobra.Command, args []string) error {speciesPrint.Nonbinary = true;Owlin.Init();Owlin.GetFirstAndLastByGender(speciesPrint);return nil},}

// PlasmoidCommand to handle the logic
var PlasmoidCommand = &cobra.Command{Use:"plasmoid",Short:"Generate names for Dungeons and Dragons species based on the plasmoid",RunE: func(cmd *cobra.Command, args []string) error { Plasmoid.GetRandomFirstAndLastName(cmd);return nil},}
var FemalePlasmoidCommand = &cobra.Command{Use: "female", Short: "Generate names for Dungeons and Dragons species based on female gender",RunE: func(cmd *cobra.Command, args []string) error {speciesPrint.Female = true;Plasmoid.Init();Plasmoid.GetFirstAndLastByGender(speciesPrint);return nil;},}
var MalePlasmoidCommand = &cobra.Command{Use: "male", Short: "Generate names for Dungeons and Dragons species based on male gender",RunE: func(cmd *cobra.Command, args []string) error {speciesPrint.Male = true;Plasmoid.Init();Plasmoid.GetFirstAndLastByGender(speciesPrint);return nil},}
var NonbinaryPlasmoidCommand = &cobra.Command{Use: "nonbinary", Short: "Generate names for Dungeons and Dragons species based on nonbinary gender",RunE: func(cmd *cobra.Command, args []string) error {speciesPrint.Nonbinary = true;Plasmoid.Init();Plasmoid.GetFirstAndLastByGender(speciesPrint);return nil},}

// RebornCommand to handle the logic
var RebornCommand = &cobra.Command{Use:"reborn",Short:"Generate names for Dungeons and Dragons species based on the reborn",RunE: func(cmd *cobra.Command, args []string) error { Reborn.GetRandomFirstAndLastName(cmd);return nil},}
var FemaleRebornCommand = &cobra.Command{Use: "female", Short: "Generate names for Dungeons and Dragons species based on female gender",RunE: func(cmd *cobra.Command, args []string) error {speciesPrint.Female = true;Reborn.Init();Reborn.GetFirstAndLastByGender(speciesPrint);return nil;},}
var MaleRebornCommand = &cobra.Command{Use: "male", Short: "Generate names for Dungeons and Dragons species based on male gender",RunE: func(cmd *cobra.Command, args []string) error {speciesPrint.Male = true;Reborn.Init();Reborn.GetFirstAndLastByGender(speciesPrint);return nil},}
var NonbinaryRebornCommand = &cobra.Command{Use: "nonbinary", Short: "Generate names for Dungeons and Dragons species based on nonbinary gender",RunE: func(cmd *cobra.Command, args []string) error {speciesPrint.Nonbinary = true;Reborn.Init();Reborn.GetFirstAndLastByGender(speciesPrint);return nil},}

// SatyrCommand to handle the logic
var SatyrCommand = &cobra.Command{Use:"satyr",Short:"Generate names for Dungeons and Dragons species based on the satyr",RunE: func(cmd *cobra.Command, args []string) error { Satyr.GetRandomFirstAndLastName(cmd);return nil},}
var FemaleSatyrCommand = &cobra.Command{Use: "female", Short: "Generate names for Dungeons and Dragons species based on female gender",RunE: func(cmd *cobra.Command, args []string) error {speciesPrint.Female = true;Satyr.Init();Satyr.GetFirstAndLastByGender(speciesPrint);return nil;},}
var MaleSatyrCommand = &cobra.Command{Use: "male", Short: "Generate names for Dungeons and Dragons species based on male gender",RunE: func(cmd *cobra.Command, args []string) error {speciesPrint.Male = true;Satyr.Init();Satyr.GetFirstAndLastByGender(speciesPrint);return nil},}
var NonbinarySatyrCommand = &cobra.Command{Use: "nonbinary", Short: "Generate names for Dungeons and Dragons species based on nonbinary gender",RunE: func(cmd *cobra.Command, args []string) error {speciesPrint.Nonbinary = true;Satyr.Init();Satyr.GetFirstAndLastByGender(speciesPrint);return nil},}

// ShifterCommand to handle the logic
var ShifterCommand = &cobra.Command{Use:"shifter",Short:"Generate names for Dungeons and Dragons species based on the shifter",RunE: func(cmd *cobra.Command, args []string) error { Shifter.GetRandomFirstAndLastName(cmd);return nil},}
var FemaleShifterCommand = &cobra.Command{Use: "female", Short: "Generate names for Dungeons and Dragons species based on female gender",RunE: func(cmd *cobra.Command, args []string) error {speciesPrint.Female = true;Shifter.Init();Shifter.GetFirstAndLastByGender(speciesPrint);return nil;},}
var MaleShifterCommand = &cobra.Command{Use: "male", Short: "Generate names for Dungeons and Dragons species based on male gender",RunE: func(cmd *cobra.Command, args []string) error {speciesPrint.Male = true;Shifter.Init();Shifter.GetFirstAndLastByGender(speciesPrint);return nil},}
var NonbinaryShifterCommand = &cobra.Command{Use: "nonbinary", Short: "Generate names for Dungeons and Dragons species based on nonbinary gender",RunE: func(cmd *cobra.Command, args []string) error {speciesPrint.Nonbinary = true;Shifter.Init();Shifter.GetFirstAndLastByGender(speciesPrint);return nil},}

// SimicHybridCommand to handle the logic
var SimicHybridCommand = &cobra.Command{Use:"simichybrid",Short:"Generate names for Dungeons and Dragons species based on the simichybrid",RunE: func(cmd *cobra.Command, args []string) error { SimicHybrid.GetRandomFirstAndLastName(cmd);return nil},}
var FemaleSimicHybridCommand = &cobra.Command{Use: "female", Short: "Generate names for Dungeons and Dragons species based on female gender",RunE: func(cmd *cobra.Command, args []string) error {speciesPrint.Female = true;SimicHybrid.Init();SimicHybrid.GetFirstAndLastByGender(speciesPrint);return nil;},}
var MaleSimicHybridCommand = &cobra.Command{Use: "male", Short: "Generate names for Dungeons and Dragons species based on male gender",RunE: func(cmd *cobra.Command, args []string) error {speciesPrint.Male = true;SimicHybrid.Init();SimicHybrid.GetFirstAndLastByGender(speciesPrint);return nil},}
var NonbinarySimicHybridCommand = &cobra.Command{Use: "nonbinary", Short: "Generate names for Dungeons and Dragons species based on nonbinary gender",RunE: func(cmd *cobra.Command, args []string) error {speciesPrint.Nonbinary = true;SimicHybrid.Init();SimicHybrid.GetFirstAndLastByGender(speciesPrint);return nil},}

// TabaxiCommand to handle the logic
var TabaxiCommand = &cobra.Command{Use:"tabaxi",Short:"Generate names for Dungeons and Dragons species based on the tabaxi",RunE: func(cmd *cobra.Command, args []string) error { Tabaxi.GetRandomFirstAndLastName(cmd);return nil},}
var FemaleTabaxiCommand = &cobra.Command{Use: "female", Short: "Generate names for Dungeons and Dragons species based on female gender",RunE: func(cmd *cobra.Command, args []string) error {speciesPrint.Female = true;Tabaxi.Init();Tabaxi.GetFirstAndLastByGender(speciesPrint);return nil;},}
var MaleTabaxiCommand = &cobra.Command{Use: "male", Short: "Generate names for Dungeons and Dragons species based on male gender",RunE: func(cmd *cobra.Command, args []string) error {speciesPrint.Male = true;Tabaxi.Init();Tabaxi.GetFirstAndLastByGender(speciesPrint);return nil},}
var NonbinaryTabaxiCommand = &cobra.Command{Use: "nonbinary", Short: "Generate names for Dungeons and Dragons species based on nonbinary gender",RunE: func(cmd *cobra.Command, args []string) error {speciesPrint.Nonbinary = true;Tabaxi.Init();Tabaxi.GetFirstAndLastByGender(speciesPrint);return nil},}

// ThriKreenCommand to handle the logic
var ThriKreenCommand = &cobra.Command{Use:"thrikreen",Short:"Generate names for Dungeons and Dragons species based on the thrikreen",RunE: func(cmd *cobra.Command, args []string) error { ThriKreen.GetRandomFirstAndLastName(cmd);return nil},}
var FemaleThriKreenCommand = &cobra.Command{Use: "female", Short: "Generate names for Dungeons and Dragons species based on female gender",RunE: func(cmd *cobra.Command, args []string) error {speciesPrint.Female = true;ThriKreen.Init();ThriKreen.GetFirstAndLastByGender(speciesPrint);return nil;},}
var MaleThriKreenCommand = &cobra.Command{Use: "male", Short: "Generate names for Dungeons and Dragons species based on male gender",RunE: func(cmd *cobra.Command, args []string) error {speciesPrint.Male = true;ThriKreen.Init();ThriKreen.GetFirstAndLastByGender(speciesPrint);return nil},}
var NonbinaryThriKreenCommand = &cobra.Command{Use: "nonbinary", Short: "Generate names for Dungeons and Dragons species based on nonbinary gender",RunE: func(cmd *cobra.Command, args []string) error {speciesPrint.Nonbinary = true;ThriKreen.Init();ThriKreen.GetFirstAndLastByGender(speciesPrint);return nil},}

// TieflingCommand to handle the logic
var TieflingCommand = &cobra.Command{Use:"tiefling",Short:"Generate names for Dungeons and Dragons species based on the tiefling",RunE: func(cmd *cobra.Command, args []string) error { Tiefling.GetRandomFirstAndLastName(cmd);return nil},}
var FemaleTieflingCommand = &cobra.Command{Use: "female", Short: "Generate names for Dungeons and Dragons species based on female gender",RunE: func(cmd *cobra.Command, args []string) error {speciesPrint.Female = true;Tiefling.Init();Tiefling.GetFirstAndLastByGender(speciesPrint);return nil;},}
var MaleTieflingCommand = &cobra.Command{Use: "male", Short: "Generate names for Dungeons and Dragons species based on male gender",RunE: func(cmd *cobra.Command, args []string) error {speciesPrint.Male = true;Tiefling.Init();Tiefling.GetFirstAndLastByGender(speciesPrint);return nil},}
var NonbinaryTieflingCommand = &cobra.Command{Use: "nonbinary", Short: "Generate names for Dungeons and Dragons species based on nonbinary gender",RunE: func(cmd *cobra.Command, args []string) error {speciesPrint.Nonbinary = true;Tiefling.Init();Tiefling.GetFirstAndLastByGender(speciesPrint);return nil},}

// TortleCommand to handle the logic
var TortleCommand = &cobra.Command{Use:"tortle",Short:"Generate names for Dungeons and Dragons species based on the tortle",RunE: func(cmd *cobra.Command, args []string) error { Tortle.GetRandomFirstAndLastName(cmd);return nil},}
var FemaleTortleCommand = &cobra.Command{Use: "female", Short: "Generate names for Dungeons and Dragons species based on female gender",RunE: func(cmd *cobra.Command, args []string) error {speciesPrint.Female = true;Tortle.Init();Tortle.GetFirstAndLastByGender(speciesPrint);return nil;},}
var MaleTortleCommand = &cobra.Command{Use: "male", Short: "Generate names for Dungeons and Dragons species based on male gender",RunE: func(cmd *cobra.Command, args []string) error {speciesPrint.Male = true;Tortle.Init();Tortle.GetFirstAndLastByGender(speciesPrint);return nil},}
var NonbinaryTortleCommand = &cobra.Command{Use: "nonbinary", Short: "Generate names for Dungeons and Dragons species based on nonbinary gender",RunE: func(cmd *cobra.Command, args []string) error {speciesPrint.Nonbinary = true;Tortle.Init();Tortle.GetFirstAndLastByGender(speciesPrint);return nil},}

// TritonCommand to handle the logic
var TritonCommand = &cobra.Command{Use:"triton",Short:"Generate names for Dungeons and Dragons species based on the triton",RunE: func(cmd *cobra.Command, args []string) error { Triton.GetRandomFirstAndLastName(cmd);return nil},}
var FemaleTritonCommand = &cobra.Command{Use: "female", Short: "Generate names for Dungeons and Dragons species based on female gender",RunE: func(cmd *cobra.Command, args []string) error {speciesPrint.Female = true;Triton.Init();Triton.GetFirstAndLastByGender(speciesPrint);return nil;},}
var MaleTritonCommand = &cobra.Command{Use: "male", Short: "Generate names for Dungeons and Dragons species based on male gender",RunE: func(cmd *cobra.Command, args []string) error {speciesPrint.Male = true;Triton.Init();Triton.GetFirstAndLastByGender(speciesPrint);return nil},}
var NonbinaryTritonCommand = &cobra.Command{Use: "nonbinary", Short: "Generate names for Dungeons and Dragons species based on nonbinary gender",RunE: func(cmd *cobra.Command, args []string) error {speciesPrint.Nonbinary = true;Triton.Init();Triton.GetFirstAndLastByGender(speciesPrint);return nil},}

// VendalkenCommand to handle the logic
var VendalkenCommand = &cobra.Command{Use:"vendalken",Short:"Generate names for Dungeons and Dragons species based on the vendalken",RunE: func(cmd *cobra.Command, args []string) error { Vendalken.GetRandomFirstAndLastName(cmd);return nil},}
var FemaleVendalkenCommand = &cobra.Command{Use: "female", Short: "Generate names for Dungeons and Dragons species based on female gender",RunE: func(cmd *cobra.Command, args []string) error {speciesPrint.Female = true;Vendalken.Init();Vendalken.GetFirstAndLastByGender(speciesPrint);return nil;},}
var MaleVendalkenCommand = &cobra.Command{Use: "male", Short: "Generate names for Dungeons and Dragons species based on male gender",RunE: func(cmd *cobra.Command, args []string) error {speciesPrint.Male = true;Vendalken.Init();Vendalken.GetFirstAndLastByGender(speciesPrint);return nil},}
var NonbinaryVendalkenCommand = &cobra.Command{Use: "nonbinary", Short: "Generate names for Dungeons and Dragons species based on nonbinary gender",RunE: func(cmd *cobra.Command, args []string) error {speciesPrint.Nonbinary = true;Vendalken.Init();Vendalken.GetFirstAndLastByGender(speciesPrint);return nil},}


func init() {
	cobra.OnInitialize(cmd.InitConfig)
	cmd.RootCmd.AddCommand(cmd.Generator)
	cmd.RootCmd.AddCommand(SpeciesCommand)

	// Here you will define your flags and configuration settings.
	// Cobra supports persistent flags, which, if defined here,
	// will be global for your application.
	cmd.RootCmd.PersistentFlags().StringVar(&cmd.CfgFile, "config", "", "config file (default is $HOME/.dnd-names.yaml)")
	//RootCmd.PersistentFlags().StringArrayP("number", "n", []string{"1"}, "Number of names to generate")

	// Cobra also supports local flags, which will only run
	// when this action is called directly.
	cmd.RootCmd.PersistentFlags().BoolVar(&cmd.EnableDebug, "debug", os.Getenv("DEBUG") == "true", "Enable debug mode")
	cmd.RootCmd.Flags().IntVarP(&cmd.Count, "number", "n", 1, "Number of names to generate")
	// RootCmd.PersistentFlags().BoolVarP(&generate, "generate", "g", false, "generate names from the generator/names.txt file, outputs go code to cmd/names.go")
	// SpeciesCommand.PersistentFlags().BoolVar(&firstFName, "first", false, "generate a first name, make sure to specify the species")

	SpeciesCommand.AddCommand(AarakocraCommand);AarakocraCommand.AddCommand(FemaleAarakocraCommand);AarakocraCommand.AddCommand(MaleAarakocraCommand);AarakocraCommand.AddCommand(NonbinaryAarakocraCommand)
	FemaleAarakocraCommand.PersistentFlags().IntVarP(&speciesPrint.Number, "number", "n", 1, "Number of names to generate");FemaleAarakocraCommand.PersistentFlags().BoolVarP(&speciesPrint.SpecialFlag, "special", "s", false, "Generate a special name");FemaleAarakocraCommand.PersistentFlags().BoolVarP(&speciesPrint.LocationFlag, "location", "l", false, "Generate a location for the character");
	MaleAarakocraCommand.PersistentFlags().IntVarP(&speciesPrint.Number, "number", "n", 1, "Number of names to generate");MaleAarakocraCommand.PersistentFlags().BoolVarP(&speciesPrint.SpecialFlag, "special", "s", false, "Generate a special name");MaleAarakocraCommand.PersistentFlags().BoolVarP(&speciesPrint.LocationFlag, "location", "l", false, "Generate a location for the character");
	NonbinaryAarakocraCommand.PersistentFlags().IntVarP(&speciesPrint.Number, "number", "n", 1, "Number of names to generate");NonbinaryAarakocraCommand.PersistentFlags().BoolVarP(&speciesPrint.SpecialFlag, "special", "s", false, "Generate a special name");NonbinaryAarakocraCommand.PersistentFlags().BoolVarP(&speciesPrint.LocationFlag, "location", "l", false, "Generate a location for the character");
	SpeciesCommand.AddCommand(AasimarCommand);AasimarCommand.AddCommand(FemaleAasimarCommand);AasimarCommand.AddCommand(MaleAasimarCommand);AasimarCommand.AddCommand(NonbinaryAasimarCommand)
	FemaleAasimarCommand.PersistentFlags().IntVarP(&speciesPrint.Number, "number", "n", 1, "Number of names to generate");FemaleAasimarCommand.PersistentFlags().BoolVarP(&speciesPrint.SpecialFlag, "special", "s", false, "Generate a special name");FemaleAasimarCommand.PersistentFlags().BoolVarP(&speciesPrint.LocationFlag, "location", "l", false, "Generate a location for the character");
	MaleAasimarCommand.PersistentFlags().IntVarP(&speciesPrint.Number, "number", "n", 1, "Number of names to generate");MaleAasimarCommand.PersistentFlags().BoolVarP(&speciesPrint.SpecialFlag, "special", "s", false, "Generate a special name");MaleAasimarCommand.PersistentFlags().BoolVarP(&speciesPrint.LocationFlag, "location", "l", false, "Generate a location for the character");
	NonbinaryAasimarCommand.PersistentFlags().IntVarP(&speciesPrint.Number, "number", "n", 1, "Number of names to generate");NonbinaryAasimarCommand.PersistentFlags().BoolVarP(&speciesPrint.SpecialFlag, "special", "s", false, "Generate a special name");NonbinaryAasimarCommand.PersistentFlags().BoolVarP(&speciesPrint.LocationFlag, "location", "l", false, "Generate a location for the character");
	SpeciesCommand.AddCommand(AutognomeCommand);AutognomeCommand.AddCommand(FemaleAutognomeCommand);AutognomeCommand.AddCommand(MaleAutognomeCommand);AutognomeCommand.AddCommand(NonbinaryAutognomeCommand)
	FemaleAutognomeCommand.PersistentFlags().IntVarP(&speciesPrint.Number, "number", "n", 1, "Number of names to generate");FemaleAutognomeCommand.PersistentFlags().BoolVarP(&speciesPrint.SpecialFlag, "special", "s", false, "Generate a special name");FemaleAutognomeCommand.PersistentFlags().BoolVarP(&speciesPrint.LocationFlag, "location", "l", false, "Generate a location for the character");
	MaleAutognomeCommand.PersistentFlags().IntVarP(&speciesPrint.Number, "number", "n", 1, "Number of names to generate");MaleAutognomeCommand.PersistentFlags().BoolVarP(&speciesPrint.SpecialFlag, "special", "s", false, "Generate a special name");MaleAutognomeCommand.PersistentFlags().BoolVarP(&speciesPrint.LocationFlag, "location", "l", false, "Generate a location for the character");
	NonbinaryAutognomeCommand.PersistentFlags().IntVarP(&speciesPrint.Number, "number", "n", 1, "Number of names to generate");NonbinaryAutognomeCommand.PersistentFlags().BoolVarP(&speciesPrint.SpecialFlag, "special", "s", false, "Generate a special name");NonbinaryAutognomeCommand.PersistentFlags().BoolVarP(&speciesPrint.LocationFlag, "location", "l", false, "Generate a location for the character");
	SpeciesCommand.AddCommand(BugbearCommand);BugbearCommand.AddCommand(FemaleBugbearCommand);BugbearCommand.AddCommand(MaleBugbearCommand);BugbearCommand.AddCommand(NonbinaryBugbearCommand)
	FemaleBugbearCommand.PersistentFlags().IntVarP(&speciesPrint.Number, "number", "n", 1, "Number of names to generate");FemaleBugbearCommand.PersistentFlags().BoolVarP(&speciesPrint.SpecialFlag, "special", "s", false, "Generate a special name");FemaleBugbearCommand.PersistentFlags().BoolVarP(&speciesPrint.LocationFlag, "location", "l", false, "Generate a location for the character");
	MaleBugbearCommand.PersistentFlags().IntVarP(&speciesPrint.Number, "number", "n", 1, "Number of names to generate");MaleBugbearCommand.PersistentFlags().BoolVarP(&speciesPrint.SpecialFlag, "special", "s", false, "Generate a special name");MaleBugbearCommand.PersistentFlags().BoolVarP(&speciesPrint.LocationFlag, "location", "l", false, "Generate a location for the character");
	NonbinaryBugbearCommand.PersistentFlags().IntVarP(&speciesPrint.Number, "number", "n", 1, "Number of names to generate");NonbinaryBugbearCommand.PersistentFlags().BoolVarP(&speciesPrint.SpecialFlag, "special", "s", false, "Generate a special name");NonbinaryBugbearCommand.PersistentFlags().BoolVarP(&speciesPrint.LocationFlag, "location", "l", false, "Generate a location for the character");
	SpeciesCommand.AddCommand(CentaurCommand);CentaurCommand.AddCommand(FemaleCentaurCommand);CentaurCommand.AddCommand(MaleCentaurCommand);CentaurCommand.AddCommand(NonbinaryCentaurCommand)
	FemaleCentaurCommand.PersistentFlags().IntVarP(&speciesPrint.Number, "number", "n", 1, "Number of names to generate");FemaleCentaurCommand.PersistentFlags().BoolVarP(&speciesPrint.SpecialFlag, "special", "s", false, "Generate a special name");FemaleCentaurCommand.PersistentFlags().BoolVarP(&speciesPrint.LocationFlag, "location", "l", false, "Generate a location for the character");
	MaleCentaurCommand.PersistentFlags().IntVarP(&speciesPrint.Number, "number", "n", 1, "Number of names to generate");MaleCentaurCommand.PersistentFlags().BoolVarP(&speciesPrint.SpecialFlag, "special", "s", false, "Generate a special name");MaleCentaurCommand.PersistentFlags().BoolVarP(&speciesPrint.LocationFlag, "location", "l", false, "Generate a location for the character");
	NonbinaryCentaurCommand.PersistentFlags().IntVarP(&speciesPrint.Number, "number", "n", 1, "Number of names to generate");NonbinaryCentaurCommand.PersistentFlags().BoolVarP(&speciesPrint.SpecialFlag, "special", "s", false, "Generate a special name");NonbinaryCentaurCommand.PersistentFlags().BoolVarP(&speciesPrint.LocationFlag, "location", "l", false, "Generate a location for the character");
	SpeciesCommand.AddCommand(ChangelingCommand);ChangelingCommand.AddCommand(FemaleChangelingCommand);ChangelingCommand.AddCommand(MaleChangelingCommand);ChangelingCommand.AddCommand(NonbinaryChangelingCommand)
	FemaleChangelingCommand.PersistentFlags().IntVarP(&speciesPrint.Number, "number", "n", 1, "Number of names to generate");FemaleChangelingCommand.PersistentFlags().BoolVarP(&speciesPrint.SpecialFlag, "special", "s", false, "Generate a special name");FemaleChangelingCommand.PersistentFlags().BoolVarP(&speciesPrint.LocationFlag, "location", "l", false, "Generate a location for the character");
	MaleChangelingCommand.PersistentFlags().IntVarP(&speciesPrint.Number, "number", "n", 1, "Number of names to generate");MaleChangelingCommand.PersistentFlags().BoolVarP(&speciesPrint.SpecialFlag, "special", "s", false, "Generate a special name");MaleChangelingCommand.PersistentFlags().BoolVarP(&speciesPrint.LocationFlag, "location", "l", false, "Generate a location for the character");
	NonbinaryChangelingCommand.PersistentFlags().IntVarP(&speciesPrint.Number, "number", "n", 1, "Number of names to generate");NonbinaryChangelingCommand.PersistentFlags().BoolVarP(&speciesPrint.SpecialFlag, "special", "s", false, "Generate a special name");NonbinaryChangelingCommand.PersistentFlags().BoolVarP(&speciesPrint.LocationFlag, "location", "l", false, "Generate a location for the character");
	SpeciesCommand.AddCommand(DhampirCommand);DhampirCommand.AddCommand(FemaleDhampirCommand);DhampirCommand.AddCommand(MaleDhampirCommand);DhampirCommand.AddCommand(NonbinaryDhampirCommand)
	FemaleDhampirCommand.PersistentFlags().IntVarP(&speciesPrint.Number, "number", "n", 1, "Number of names to generate");FemaleDhampirCommand.PersistentFlags().BoolVarP(&speciesPrint.SpecialFlag, "special", "s", false, "Generate a special name");FemaleDhampirCommand.PersistentFlags().BoolVarP(&speciesPrint.LocationFlag, "location", "l", false, "Generate a location for the character");
	MaleDhampirCommand.PersistentFlags().IntVarP(&speciesPrint.Number, "number", "n", 1, "Number of names to generate");MaleDhampirCommand.PersistentFlags().BoolVarP(&speciesPrint.SpecialFlag, "special", "s", false, "Generate a special name");MaleDhampirCommand.PersistentFlags().BoolVarP(&speciesPrint.LocationFlag, "location", "l", false, "Generate a location for the character");
	NonbinaryDhampirCommand.PersistentFlags().IntVarP(&speciesPrint.Number, "number", "n", 1, "Number of names to generate");NonbinaryDhampirCommand.PersistentFlags().BoolVarP(&speciesPrint.SpecialFlag, "special", "s", false, "Generate a special name");NonbinaryDhampirCommand.PersistentFlags().BoolVarP(&speciesPrint.LocationFlag, "location", "l", false, "Generate a location for the character");
	SpeciesCommand.AddCommand(DragonbornCommand);DragonbornCommand.AddCommand(FemaleDragonbornCommand);DragonbornCommand.AddCommand(MaleDragonbornCommand);DragonbornCommand.AddCommand(NonbinaryDragonbornCommand)
	FemaleDragonbornCommand.PersistentFlags().IntVarP(&speciesPrint.Number, "number", "n", 1, "Number of names to generate");FemaleDragonbornCommand.PersistentFlags().BoolVarP(&speciesPrint.SpecialFlag, "special", "s", false, "Generate a special name");FemaleDragonbornCommand.PersistentFlags().BoolVarP(&speciesPrint.LocationFlag, "location", "l", false, "Generate a location for the character");
	MaleDragonbornCommand.PersistentFlags().IntVarP(&speciesPrint.Number, "number", "n", 1, "Number of names to generate");MaleDragonbornCommand.PersistentFlags().BoolVarP(&speciesPrint.SpecialFlag, "special", "s", false, "Generate a special name");MaleDragonbornCommand.PersistentFlags().BoolVarP(&speciesPrint.LocationFlag, "location", "l", false, "Generate a location for the character");
	NonbinaryDragonbornCommand.PersistentFlags().IntVarP(&speciesPrint.Number, "number", "n", 1, "Number of names to generate");NonbinaryDragonbornCommand.PersistentFlags().BoolVarP(&speciesPrint.SpecialFlag, "special", "s", false, "Generate a special name");NonbinaryDragonbornCommand.PersistentFlags().BoolVarP(&speciesPrint.LocationFlag, "location", "l", false, "Generate a location for the character");
	SpeciesCommand.AddCommand(DwarfCommand);DwarfCommand.AddCommand(FemaleDwarfCommand);DwarfCommand.AddCommand(MaleDwarfCommand);DwarfCommand.AddCommand(NonbinaryDwarfCommand)
	FemaleDwarfCommand.PersistentFlags().IntVarP(&speciesPrint.Number, "number", "n", 1, "Number of names to generate");FemaleDwarfCommand.PersistentFlags().BoolVarP(&speciesPrint.SpecialFlag, "special", "s", false, "Generate a special name");FemaleDwarfCommand.PersistentFlags().BoolVarP(&speciesPrint.LocationFlag, "location", "l", false, "Generate a location for the character");
	MaleDwarfCommand.PersistentFlags().IntVarP(&speciesPrint.Number, "number", "n", 1, "Number of names to generate");MaleDwarfCommand.PersistentFlags().BoolVarP(&speciesPrint.SpecialFlag, "special", "s", false, "Generate a special name");MaleDwarfCommand.PersistentFlags().BoolVarP(&speciesPrint.LocationFlag, "location", "l", false, "Generate a location for the character");
	NonbinaryDwarfCommand.PersistentFlags().IntVarP(&speciesPrint.Number, "number", "n", 1, "Number of names to generate");NonbinaryDwarfCommand.PersistentFlags().BoolVarP(&speciesPrint.SpecialFlag, "special", "s", false, "Generate a special name");NonbinaryDwarfCommand.PersistentFlags().BoolVarP(&speciesPrint.LocationFlag, "location", "l", false, "Generate a location for the character");
	SpeciesCommand.AddCommand(ElfCommand);ElfCommand.AddCommand(FemaleElfCommand);ElfCommand.AddCommand(MaleElfCommand);ElfCommand.AddCommand(NonbinaryElfCommand)
	FemaleElfCommand.PersistentFlags().IntVarP(&speciesPrint.Number, "number", "n", 1, "Number of names to generate");FemaleElfCommand.PersistentFlags().BoolVarP(&speciesPrint.SpecialFlag, "special", "s", false, "Generate a special name");FemaleElfCommand.PersistentFlags().BoolVarP(&speciesPrint.LocationFlag, "location", "l", false, "Generate a location for the character");
	MaleElfCommand.PersistentFlags().IntVarP(&speciesPrint.Number, "number", "n", 1, "Number of names to generate");MaleElfCommand.PersistentFlags().BoolVarP(&speciesPrint.SpecialFlag, "special", "s", false, "Generate a special name");MaleElfCommand.PersistentFlags().BoolVarP(&speciesPrint.LocationFlag, "location", "l", false, "Generate a location for the character");
	NonbinaryElfCommand.PersistentFlags().IntVarP(&speciesPrint.Number, "number", "n", 1, "Number of names to generate");NonbinaryElfCommand.PersistentFlags().BoolVarP(&speciesPrint.SpecialFlag, "special", "s", false, "Generate a special name");NonbinaryElfCommand.PersistentFlags().BoolVarP(&speciesPrint.LocationFlag, "location", "l", false, "Generate a location for the character");
	SpeciesCommand.AddCommand(FairyCommand);FairyCommand.AddCommand(FemaleFairyCommand);FairyCommand.AddCommand(MaleFairyCommand);FairyCommand.AddCommand(NonbinaryFairyCommand)
	FemaleFairyCommand.PersistentFlags().IntVarP(&speciesPrint.Number, "number", "n", 1, "Number of names to generate");FemaleFairyCommand.PersistentFlags().BoolVarP(&speciesPrint.SpecialFlag, "special", "s", false, "Generate a special name");FemaleFairyCommand.PersistentFlags().BoolVarP(&speciesPrint.LocationFlag, "location", "l", false, "Generate a location for the character");
	MaleFairyCommand.PersistentFlags().IntVarP(&speciesPrint.Number, "number", "n", 1, "Number of names to generate");MaleFairyCommand.PersistentFlags().BoolVarP(&speciesPrint.SpecialFlag, "special", "s", false, "Generate a special name");MaleFairyCommand.PersistentFlags().BoolVarP(&speciesPrint.LocationFlag, "location", "l", false, "Generate a location for the character");
	NonbinaryFairyCommand.PersistentFlags().IntVarP(&speciesPrint.Number, "number", "n", 1, "Number of names to generate");NonbinaryFairyCommand.PersistentFlags().BoolVarP(&speciesPrint.SpecialFlag, "special", "s", false, "Generate a special name");NonbinaryFairyCommand.PersistentFlags().BoolVarP(&speciesPrint.LocationFlag, "location", "l", false, "Generate a location for the character");
	SpeciesCommand.AddCommand(FirbolgCommand);FirbolgCommand.AddCommand(FemaleFirbolgCommand);FirbolgCommand.AddCommand(MaleFirbolgCommand);FirbolgCommand.AddCommand(NonbinaryFirbolgCommand)
	FemaleFirbolgCommand.PersistentFlags().IntVarP(&speciesPrint.Number, "number", "n", 1, "Number of names to generate");FemaleFirbolgCommand.PersistentFlags().BoolVarP(&speciesPrint.SpecialFlag, "special", "s", false, "Generate a special name");FemaleFirbolgCommand.PersistentFlags().BoolVarP(&speciesPrint.LocationFlag, "location", "l", false, "Generate a location for the character");
	MaleFirbolgCommand.PersistentFlags().IntVarP(&speciesPrint.Number, "number", "n", 1, "Number of names to generate");MaleFirbolgCommand.PersistentFlags().BoolVarP(&speciesPrint.SpecialFlag, "special", "s", false, "Generate a special name");MaleFirbolgCommand.PersistentFlags().BoolVarP(&speciesPrint.LocationFlag, "location", "l", false, "Generate a location for the character");
	NonbinaryFirbolgCommand.PersistentFlags().IntVarP(&speciesPrint.Number, "number", "n", 1, "Number of names to generate");NonbinaryFirbolgCommand.PersistentFlags().BoolVarP(&speciesPrint.SpecialFlag, "special", "s", false, "Generate a special name");NonbinaryFirbolgCommand.PersistentFlags().BoolVarP(&speciesPrint.LocationFlag, "location", "l", false, "Generate a location for the character");
	SpeciesCommand.AddCommand(GenasiCommand);GenasiCommand.AddCommand(FemaleGenasiCommand);GenasiCommand.AddCommand(MaleGenasiCommand);GenasiCommand.AddCommand(NonbinaryGenasiCommand)
	FemaleGenasiCommand.PersistentFlags().IntVarP(&speciesPrint.Number, "number", "n", 1, "Number of names to generate");FemaleGenasiCommand.PersistentFlags().BoolVarP(&speciesPrint.SpecialFlag, "special", "s", false, "Generate a special name");FemaleGenasiCommand.PersistentFlags().BoolVarP(&speciesPrint.LocationFlag, "location", "l", false, "Generate a location for the character");
	MaleGenasiCommand.PersistentFlags().IntVarP(&speciesPrint.Number, "number", "n", 1, "Number of names to generate");MaleGenasiCommand.PersistentFlags().BoolVarP(&speciesPrint.SpecialFlag, "special", "s", false, "Generate a special name");MaleGenasiCommand.PersistentFlags().BoolVarP(&speciesPrint.LocationFlag, "location", "l", false, "Generate a location for the character");
	NonbinaryGenasiCommand.PersistentFlags().IntVarP(&speciesPrint.Number, "number", "n", 1, "Number of names to generate");NonbinaryGenasiCommand.PersistentFlags().BoolVarP(&speciesPrint.SpecialFlag, "special", "s", false, "Generate a special name");NonbinaryGenasiCommand.PersistentFlags().BoolVarP(&speciesPrint.LocationFlag, "location", "l", false, "Generate a location for the character");
	SpeciesCommand.AddCommand(GiffCommand);GiffCommand.AddCommand(FemaleGiffCommand);GiffCommand.AddCommand(MaleGiffCommand);GiffCommand.AddCommand(NonbinaryGiffCommand)
	FemaleGiffCommand.PersistentFlags().IntVarP(&speciesPrint.Number, "number", "n", 1, "Number of names to generate");FemaleGiffCommand.PersistentFlags().BoolVarP(&speciesPrint.SpecialFlag, "special", "s", false, "Generate a special name");FemaleGiffCommand.PersistentFlags().BoolVarP(&speciesPrint.LocationFlag, "location", "l", false, "Generate a location for the character");
	MaleGiffCommand.PersistentFlags().IntVarP(&speciesPrint.Number, "number", "n", 1, "Number of names to generate");MaleGiffCommand.PersistentFlags().BoolVarP(&speciesPrint.SpecialFlag, "special", "s", false, "Generate a special name");MaleGiffCommand.PersistentFlags().BoolVarP(&speciesPrint.LocationFlag, "location", "l", false, "Generate a location for the character");
	NonbinaryGiffCommand.PersistentFlags().IntVarP(&speciesPrint.Number, "number", "n", 1, "Number of names to generate");NonbinaryGiffCommand.PersistentFlags().BoolVarP(&speciesPrint.SpecialFlag, "special", "s", false, "Generate a special name");NonbinaryGiffCommand.PersistentFlags().BoolVarP(&speciesPrint.LocationFlag, "location", "l", false, "Generate a location for the character");
	SpeciesCommand.AddCommand(GithCommand);GithCommand.AddCommand(FemaleGithCommand);GithCommand.AddCommand(MaleGithCommand);GithCommand.AddCommand(NonbinaryGithCommand)
	FemaleGithCommand.PersistentFlags().IntVarP(&speciesPrint.Number, "number", "n", 1, "Number of names to generate");FemaleGithCommand.PersistentFlags().BoolVarP(&speciesPrint.SpecialFlag, "special", "s", false, "Generate a special name");FemaleGithCommand.PersistentFlags().BoolVarP(&speciesPrint.LocationFlag, "location", "l", false, "Generate a location for the character");
	MaleGithCommand.PersistentFlags().IntVarP(&speciesPrint.Number, "number", "n", 1, "Number of names to generate");MaleGithCommand.PersistentFlags().BoolVarP(&speciesPrint.SpecialFlag, "special", "s", false, "Generate a special name");MaleGithCommand.PersistentFlags().BoolVarP(&speciesPrint.LocationFlag, "location", "l", false, "Generate a location for the character");
	NonbinaryGithCommand.PersistentFlags().IntVarP(&speciesPrint.Number, "number", "n", 1, "Number of names to generate");NonbinaryGithCommand.PersistentFlags().BoolVarP(&speciesPrint.SpecialFlag, "special", "s", false, "Generate a special name");NonbinaryGithCommand.PersistentFlags().BoolVarP(&speciesPrint.LocationFlag, "location", "l", false, "Generate a location for the character");
	SpeciesCommand.AddCommand(GnomeCommand);GnomeCommand.AddCommand(FemaleGnomeCommand);GnomeCommand.AddCommand(MaleGnomeCommand);GnomeCommand.AddCommand(NonbinaryGnomeCommand)
	FemaleGnomeCommand.PersistentFlags().IntVarP(&speciesPrint.Number, "number", "n", 1, "Number of names to generate");FemaleGnomeCommand.PersistentFlags().BoolVarP(&speciesPrint.SpecialFlag, "special", "s", false, "Generate a special name");FemaleGnomeCommand.PersistentFlags().BoolVarP(&speciesPrint.LocationFlag, "location", "l", false, "Generate a location for the character");
	MaleGnomeCommand.PersistentFlags().IntVarP(&speciesPrint.Number, "number", "n", 1, "Number of names to generate");MaleGnomeCommand.PersistentFlags().BoolVarP(&speciesPrint.SpecialFlag, "special", "s", false, "Generate a special name");MaleGnomeCommand.PersistentFlags().BoolVarP(&speciesPrint.LocationFlag, "location", "l", false, "Generate a location for the character");
	NonbinaryGnomeCommand.PersistentFlags().IntVarP(&speciesPrint.Number, "number", "n", 1, "Number of names to generate");NonbinaryGnomeCommand.PersistentFlags().BoolVarP(&speciesPrint.SpecialFlag, "special", "s", false, "Generate a special name");NonbinaryGnomeCommand.PersistentFlags().BoolVarP(&speciesPrint.LocationFlag, "location", "l", false, "Generate a location for the character");
	SpeciesCommand.AddCommand(GoblinCommand);GoblinCommand.AddCommand(FemaleGoblinCommand);GoblinCommand.AddCommand(MaleGoblinCommand);GoblinCommand.AddCommand(NonbinaryGoblinCommand)
	FemaleGoblinCommand.PersistentFlags().IntVarP(&speciesPrint.Number, "number", "n", 1, "Number of names to generate");FemaleGoblinCommand.PersistentFlags().BoolVarP(&speciesPrint.SpecialFlag, "special", "s", false, "Generate a special name");FemaleGoblinCommand.PersistentFlags().BoolVarP(&speciesPrint.LocationFlag, "location", "l", false, "Generate a location for the character");
	MaleGoblinCommand.PersistentFlags().IntVarP(&speciesPrint.Number, "number", "n", 1, "Number of names to generate");MaleGoblinCommand.PersistentFlags().BoolVarP(&speciesPrint.SpecialFlag, "special", "s", false, "Generate a special name");MaleGoblinCommand.PersistentFlags().BoolVarP(&speciesPrint.LocationFlag, "location", "l", false, "Generate a location for the character");
	NonbinaryGoblinCommand.PersistentFlags().IntVarP(&speciesPrint.Number, "number", "n", 1, "Number of names to generate");NonbinaryGoblinCommand.PersistentFlags().BoolVarP(&speciesPrint.SpecialFlag, "special", "s", false, "Generate a special name");NonbinaryGoblinCommand.PersistentFlags().BoolVarP(&speciesPrint.LocationFlag, "location", "l", false, "Generate a location for the character");
	SpeciesCommand.AddCommand(GoliathCommand);GoliathCommand.AddCommand(FemaleGoliathCommand);GoliathCommand.AddCommand(MaleGoliathCommand);GoliathCommand.AddCommand(NonbinaryGoliathCommand)
	FemaleGoliathCommand.PersistentFlags().IntVarP(&speciesPrint.Number, "number", "n", 1, "Number of names to generate");FemaleGoliathCommand.PersistentFlags().BoolVarP(&speciesPrint.SpecialFlag, "special", "s", false, "Generate a special name");FemaleGoliathCommand.PersistentFlags().BoolVarP(&speciesPrint.LocationFlag, "location", "l", false, "Generate a location for the character");
	MaleGoliathCommand.PersistentFlags().IntVarP(&speciesPrint.Number, "number", "n", 1, "Number of names to generate");MaleGoliathCommand.PersistentFlags().BoolVarP(&speciesPrint.SpecialFlag, "special", "s", false, "Generate a special name");MaleGoliathCommand.PersistentFlags().BoolVarP(&speciesPrint.LocationFlag, "location", "l", false, "Generate a location for the character");
	NonbinaryGoliathCommand.PersistentFlags().IntVarP(&speciesPrint.Number, "number", "n", 1, "Number of names to generate");NonbinaryGoliathCommand.PersistentFlags().BoolVarP(&speciesPrint.SpecialFlag, "special", "s", false, "Generate a special name");NonbinaryGoliathCommand.PersistentFlags().BoolVarP(&speciesPrint.LocationFlag, "location", "l", false, "Generate a location for the character");
	SpeciesCommand.AddCommand(HalfElfCommand);HalfElfCommand.AddCommand(FemaleHalfElfCommand);HalfElfCommand.AddCommand(MaleHalfElfCommand);HalfElfCommand.AddCommand(NonbinaryHalfElfCommand)
	FemaleHalfElfCommand.PersistentFlags().IntVarP(&speciesPrint.Number, "number", "n", 1, "Number of names to generate");FemaleHalfElfCommand.PersistentFlags().BoolVarP(&speciesPrint.SpecialFlag, "special", "s", false, "Generate a special name");FemaleHalfElfCommand.PersistentFlags().BoolVarP(&speciesPrint.LocationFlag, "location", "l", false, "Generate a location for the character");
	MaleHalfElfCommand.PersistentFlags().IntVarP(&speciesPrint.Number, "number", "n", 1, "Number of names to generate");MaleHalfElfCommand.PersistentFlags().BoolVarP(&speciesPrint.SpecialFlag, "special", "s", false, "Generate a special name");MaleHalfElfCommand.PersistentFlags().BoolVarP(&speciesPrint.LocationFlag, "location", "l", false, "Generate a location for the character");
	NonbinaryHalfElfCommand.PersistentFlags().IntVarP(&speciesPrint.Number, "number", "n", 1, "Number of names to generate");NonbinaryHalfElfCommand.PersistentFlags().BoolVarP(&speciesPrint.SpecialFlag, "special", "s", false, "Generate a special name");NonbinaryHalfElfCommand.PersistentFlags().BoolVarP(&speciesPrint.LocationFlag, "location", "l", false, "Generate a location for the character");
	SpeciesCommand.AddCommand(HalfOrcCommand);HalfOrcCommand.AddCommand(FemaleHalfOrcCommand);HalfOrcCommand.AddCommand(MaleHalfOrcCommand);HalfOrcCommand.AddCommand(NonbinaryHalfOrcCommand)
	FemaleHalfOrcCommand.PersistentFlags().IntVarP(&speciesPrint.Number, "number", "n", 1, "Number of names to generate");FemaleHalfOrcCommand.PersistentFlags().BoolVarP(&speciesPrint.SpecialFlag, "special", "s", false, "Generate a special name");FemaleHalfOrcCommand.PersistentFlags().BoolVarP(&speciesPrint.LocationFlag, "location", "l", false, "Generate a location for the character");
	MaleHalfOrcCommand.PersistentFlags().IntVarP(&speciesPrint.Number, "number", "n", 1, "Number of names to generate");MaleHalfOrcCommand.PersistentFlags().BoolVarP(&speciesPrint.SpecialFlag, "special", "s", false, "Generate a special name");MaleHalfOrcCommand.PersistentFlags().BoolVarP(&speciesPrint.LocationFlag, "location", "l", false, "Generate a location for the character");
	NonbinaryHalfOrcCommand.PersistentFlags().IntVarP(&speciesPrint.Number, "number", "n", 1, "Number of names to generate");NonbinaryHalfOrcCommand.PersistentFlags().BoolVarP(&speciesPrint.SpecialFlag, "special", "s", false, "Generate a special name");NonbinaryHalfOrcCommand.PersistentFlags().BoolVarP(&speciesPrint.LocationFlag, "location", "l", false, "Generate a location for the character");
	SpeciesCommand.AddCommand(HalflingCommand);HalflingCommand.AddCommand(FemaleHalflingCommand);HalflingCommand.AddCommand(MaleHalflingCommand);HalflingCommand.AddCommand(NonbinaryHalflingCommand)
	FemaleHalflingCommand.PersistentFlags().IntVarP(&speciesPrint.Number, "number", "n", 1, "Number of names to generate");FemaleHalflingCommand.PersistentFlags().BoolVarP(&speciesPrint.SpecialFlag, "special", "s", false, "Generate a special name");FemaleHalflingCommand.PersistentFlags().BoolVarP(&speciesPrint.LocationFlag, "location", "l", false, "Generate a location for the character");
	MaleHalflingCommand.PersistentFlags().IntVarP(&speciesPrint.Number, "number", "n", 1, "Number of names to generate");MaleHalflingCommand.PersistentFlags().BoolVarP(&speciesPrint.SpecialFlag, "special", "s", false, "Generate a special name");MaleHalflingCommand.PersistentFlags().BoolVarP(&speciesPrint.LocationFlag, "location", "l", false, "Generate a location for the character");
	NonbinaryHalflingCommand.PersistentFlags().IntVarP(&speciesPrint.Number, "number", "n", 1, "Number of names to generate");NonbinaryHalflingCommand.PersistentFlags().BoolVarP(&speciesPrint.SpecialFlag, "special", "s", false, "Generate a special name");NonbinaryHalflingCommand.PersistentFlags().BoolVarP(&speciesPrint.LocationFlag, "location", "l", false, "Generate a location for the character");
	SpeciesCommand.AddCommand(HarengonCommand);HarengonCommand.AddCommand(FemaleHarengonCommand);HarengonCommand.AddCommand(MaleHarengonCommand);HarengonCommand.AddCommand(NonbinaryHarengonCommand)
	FemaleHarengonCommand.PersistentFlags().IntVarP(&speciesPrint.Number, "number", "n", 1, "Number of names to generate");FemaleHarengonCommand.PersistentFlags().BoolVarP(&speciesPrint.SpecialFlag, "special", "s", false, "Generate a special name");FemaleHarengonCommand.PersistentFlags().BoolVarP(&speciesPrint.LocationFlag, "location", "l", false, "Generate a location for the character");
	MaleHarengonCommand.PersistentFlags().IntVarP(&speciesPrint.Number, "number", "n", 1, "Number of names to generate");MaleHarengonCommand.PersistentFlags().BoolVarP(&speciesPrint.SpecialFlag, "special", "s", false, "Generate a special name");MaleHarengonCommand.PersistentFlags().BoolVarP(&speciesPrint.LocationFlag, "location", "l", false, "Generate a location for the character");
	NonbinaryHarengonCommand.PersistentFlags().IntVarP(&speciesPrint.Number, "number", "n", 1, "Number of names to generate");NonbinaryHarengonCommand.PersistentFlags().BoolVarP(&speciesPrint.SpecialFlag, "special", "s", false, "Generate a special name");NonbinaryHarengonCommand.PersistentFlags().BoolVarP(&speciesPrint.LocationFlag, "location", "l", false, "Generate a location for the character");
	SpeciesCommand.AddCommand(HexbloodCommand);HexbloodCommand.AddCommand(FemaleHexbloodCommand);HexbloodCommand.AddCommand(MaleHexbloodCommand);HexbloodCommand.AddCommand(NonbinaryHexbloodCommand)
	FemaleHexbloodCommand.PersistentFlags().IntVarP(&speciesPrint.Number, "number", "n", 1, "Number of names to generate");FemaleHexbloodCommand.PersistentFlags().BoolVarP(&speciesPrint.SpecialFlag, "special", "s", false, "Generate a special name");FemaleHexbloodCommand.PersistentFlags().BoolVarP(&speciesPrint.LocationFlag, "location", "l", false, "Generate a location for the character");
	MaleHexbloodCommand.PersistentFlags().IntVarP(&speciesPrint.Number, "number", "n", 1, "Number of names to generate");MaleHexbloodCommand.PersistentFlags().BoolVarP(&speciesPrint.SpecialFlag, "special", "s", false, "Generate a special name");MaleHexbloodCommand.PersistentFlags().BoolVarP(&speciesPrint.LocationFlag, "location", "l", false, "Generate a location for the character");
	NonbinaryHexbloodCommand.PersistentFlags().IntVarP(&speciesPrint.Number, "number", "n", 1, "Number of names to generate");NonbinaryHexbloodCommand.PersistentFlags().BoolVarP(&speciesPrint.SpecialFlag, "special", "s", false, "Generate a special name");NonbinaryHexbloodCommand.PersistentFlags().BoolVarP(&speciesPrint.LocationFlag, "location", "l", false, "Generate a location for the character");
	SpeciesCommand.AddCommand(HobgoblinCommand);HobgoblinCommand.AddCommand(FemaleHobgoblinCommand);HobgoblinCommand.AddCommand(MaleHobgoblinCommand);HobgoblinCommand.AddCommand(NonbinaryHobgoblinCommand)
	FemaleHobgoblinCommand.PersistentFlags().IntVarP(&speciesPrint.Number, "number", "n", 1, "Number of names to generate");FemaleHobgoblinCommand.PersistentFlags().BoolVarP(&speciesPrint.SpecialFlag, "special", "s", false, "Generate a special name");FemaleHobgoblinCommand.PersistentFlags().BoolVarP(&speciesPrint.LocationFlag, "location", "l", false, "Generate a location for the character");
	MaleHobgoblinCommand.PersistentFlags().IntVarP(&speciesPrint.Number, "number", "n", 1, "Number of names to generate");MaleHobgoblinCommand.PersistentFlags().BoolVarP(&speciesPrint.SpecialFlag, "special", "s", false, "Generate a special name");MaleHobgoblinCommand.PersistentFlags().BoolVarP(&speciesPrint.LocationFlag, "location", "l", false, "Generate a location for the character");
	NonbinaryHobgoblinCommand.PersistentFlags().IntVarP(&speciesPrint.Number, "number", "n", 1, "Number of names to generate");NonbinaryHobgoblinCommand.PersistentFlags().BoolVarP(&speciesPrint.SpecialFlag, "special", "s", false, "Generate a special name");NonbinaryHobgoblinCommand.PersistentFlags().BoolVarP(&speciesPrint.LocationFlag, "location", "l", false, "Generate a location for the character");
	SpeciesCommand.AddCommand(HumanCommand);HumanCommand.AddCommand(FemaleHumanCommand);HumanCommand.AddCommand(MaleHumanCommand);HumanCommand.AddCommand(NonbinaryHumanCommand)
	FemaleHumanCommand.PersistentFlags().IntVarP(&speciesPrint.Number, "number", "n", 1, "Number of names to generate");FemaleHumanCommand.PersistentFlags().BoolVarP(&speciesPrint.SpecialFlag, "special", "s", false, "Generate a special name");FemaleHumanCommand.PersistentFlags().BoolVarP(&speciesPrint.LocationFlag, "location", "l", false, "Generate a location for the character");
	MaleHumanCommand.PersistentFlags().IntVarP(&speciesPrint.Number, "number", "n", 1, "Number of names to generate");MaleHumanCommand.PersistentFlags().BoolVarP(&speciesPrint.SpecialFlag, "special", "s", false, "Generate a special name");MaleHumanCommand.PersistentFlags().BoolVarP(&speciesPrint.LocationFlag, "location", "l", false, "Generate a location for the character");
	NonbinaryHumanCommand.PersistentFlags().IntVarP(&speciesPrint.Number, "number", "n", 1, "Number of names to generate");NonbinaryHumanCommand.PersistentFlags().BoolVarP(&speciesPrint.SpecialFlag, "special", "s", false, "Generate a special name");NonbinaryHumanCommand.PersistentFlags().BoolVarP(&speciesPrint.LocationFlag, "location", "l", false, "Generate a location for the character");
	SpeciesCommand.AddCommand(KalashtarCommand);KalashtarCommand.AddCommand(FemaleKalashtarCommand);KalashtarCommand.AddCommand(MaleKalashtarCommand);KalashtarCommand.AddCommand(NonbinaryKalashtarCommand)
	FemaleKalashtarCommand.PersistentFlags().IntVarP(&speciesPrint.Number, "number", "n", 1, "Number of names to generate");FemaleKalashtarCommand.PersistentFlags().BoolVarP(&speciesPrint.SpecialFlag, "special", "s", false, "Generate a special name");FemaleKalashtarCommand.PersistentFlags().BoolVarP(&speciesPrint.LocationFlag, "location", "l", false, "Generate a location for the character");
	MaleKalashtarCommand.PersistentFlags().IntVarP(&speciesPrint.Number, "number", "n", 1, "Number of names to generate");MaleKalashtarCommand.PersistentFlags().BoolVarP(&speciesPrint.SpecialFlag, "special", "s", false, "Generate a special name");MaleKalashtarCommand.PersistentFlags().BoolVarP(&speciesPrint.LocationFlag, "location", "l", false, "Generate a location for the character");
	NonbinaryKalashtarCommand.PersistentFlags().IntVarP(&speciesPrint.Number, "number", "n", 1, "Number of names to generate");NonbinaryKalashtarCommand.PersistentFlags().BoolVarP(&speciesPrint.SpecialFlag, "special", "s", false, "Generate a special name");NonbinaryKalashtarCommand.PersistentFlags().BoolVarP(&speciesPrint.LocationFlag, "location", "l", false, "Generate a location for the character");
	SpeciesCommand.AddCommand(KenderCommand);KenderCommand.AddCommand(FemaleKenderCommand);KenderCommand.AddCommand(MaleKenderCommand);KenderCommand.AddCommand(NonbinaryKenderCommand)
	FemaleKenderCommand.PersistentFlags().IntVarP(&speciesPrint.Number, "number", "n", 1, "Number of names to generate");FemaleKenderCommand.PersistentFlags().BoolVarP(&speciesPrint.SpecialFlag, "special", "s", false, "Generate a special name");FemaleKenderCommand.PersistentFlags().BoolVarP(&speciesPrint.LocationFlag, "location", "l", false, "Generate a location for the character");
	MaleKenderCommand.PersistentFlags().IntVarP(&speciesPrint.Number, "number", "n", 1, "Number of names to generate");MaleKenderCommand.PersistentFlags().BoolVarP(&speciesPrint.SpecialFlag, "special", "s", false, "Generate a special name");MaleKenderCommand.PersistentFlags().BoolVarP(&speciesPrint.LocationFlag, "location", "l", false, "Generate a location for the character");
	NonbinaryKenderCommand.PersistentFlags().IntVarP(&speciesPrint.Number, "number", "n", 1, "Number of names to generate");NonbinaryKenderCommand.PersistentFlags().BoolVarP(&speciesPrint.SpecialFlag, "special", "s", false, "Generate a special name");NonbinaryKenderCommand.PersistentFlags().BoolVarP(&speciesPrint.LocationFlag, "location", "l", false, "Generate a location for the character");
	SpeciesCommand.AddCommand(KenkuCommand);KenkuCommand.AddCommand(FemaleKenkuCommand);KenkuCommand.AddCommand(MaleKenkuCommand);KenkuCommand.AddCommand(NonbinaryKenkuCommand)
	FemaleKenkuCommand.PersistentFlags().IntVarP(&speciesPrint.Number, "number", "n", 1, "Number of names to generate");FemaleKenkuCommand.PersistentFlags().BoolVarP(&speciesPrint.SpecialFlag, "special", "s", false, "Generate a special name");FemaleKenkuCommand.PersistentFlags().BoolVarP(&speciesPrint.LocationFlag, "location", "l", false, "Generate a location for the character");
	MaleKenkuCommand.PersistentFlags().IntVarP(&speciesPrint.Number, "number", "n", 1, "Number of names to generate");MaleKenkuCommand.PersistentFlags().BoolVarP(&speciesPrint.SpecialFlag, "special", "s", false, "Generate a special name");MaleKenkuCommand.PersistentFlags().BoolVarP(&speciesPrint.LocationFlag, "location", "l", false, "Generate a location for the character");
	NonbinaryKenkuCommand.PersistentFlags().IntVarP(&speciesPrint.Number, "number", "n", 1, "Number of names to generate");NonbinaryKenkuCommand.PersistentFlags().BoolVarP(&speciesPrint.SpecialFlag, "special", "s", false, "Generate a special name");NonbinaryKenkuCommand.PersistentFlags().BoolVarP(&speciesPrint.LocationFlag, "location", "l", false, "Generate a location for the character");
	SpeciesCommand.AddCommand(KoboldCommand);KoboldCommand.AddCommand(FemaleKoboldCommand);KoboldCommand.AddCommand(MaleKoboldCommand);KoboldCommand.AddCommand(NonbinaryKoboldCommand)
	FemaleKoboldCommand.PersistentFlags().IntVarP(&speciesPrint.Number, "number", "n", 1, "Number of names to generate");FemaleKoboldCommand.PersistentFlags().BoolVarP(&speciesPrint.SpecialFlag, "special", "s", false, "Generate a special name");FemaleKoboldCommand.PersistentFlags().BoolVarP(&speciesPrint.LocationFlag, "location", "l", false, "Generate a location for the character");
	MaleKoboldCommand.PersistentFlags().IntVarP(&speciesPrint.Number, "number", "n", 1, "Number of names to generate");MaleKoboldCommand.PersistentFlags().BoolVarP(&speciesPrint.SpecialFlag, "special", "s", false, "Generate a special name");MaleKoboldCommand.PersistentFlags().BoolVarP(&speciesPrint.LocationFlag, "location", "l", false, "Generate a location for the character");
	NonbinaryKoboldCommand.PersistentFlags().IntVarP(&speciesPrint.Number, "number", "n", 1, "Number of names to generate");NonbinaryKoboldCommand.PersistentFlags().BoolVarP(&speciesPrint.SpecialFlag, "special", "s", false, "Generate a special name");NonbinaryKoboldCommand.PersistentFlags().BoolVarP(&speciesPrint.LocationFlag, "location", "l", false, "Generate a location for the character");
	SpeciesCommand.AddCommand(LeoninCommand);LeoninCommand.AddCommand(FemaleLeoninCommand);LeoninCommand.AddCommand(MaleLeoninCommand);LeoninCommand.AddCommand(NonbinaryLeoninCommand)
	FemaleLeoninCommand.PersistentFlags().IntVarP(&speciesPrint.Number, "number", "n", 1, "Number of names to generate");FemaleLeoninCommand.PersistentFlags().BoolVarP(&speciesPrint.SpecialFlag, "special", "s", false, "Generate a special name");FemaleLeoninCommand.PersistentFlags().BoolVarP(&speciesPrint.LocationFlag, "location", "l", false, "Generate a location for the character");
	MaleLeoninCommand.PersistentFlags().IntVarP(&speciesPrint.Number, "number", "n", 1, "Number of names to generate");MaleLeoninCommand.PersistentFlags().BoolVarP(&speciesPrint.SpecialFlag, "special", "s", false, "Generate a special name");MaleLeoninCommand.PersistentFlags().BoolVarP(&speciesPrint.LocationFlag, "location", "l", false, "Generate a location for the character");
	NonbinaryLeoninCommand.PersistentFlags().IntVarP(&speciesPrint.Number, "number", "n", 1, "Number of names to generate");NonbinaryLeoninCommand.PersistentFlags().BoolVarP(&speciesPrint.SpecialFlag, "special", "s", false, "Generate a special name");NonbinaryLeoninCommand.PersistentFlags().BoolVarP(&speciesPrint.LocationFlag, "location", "l", false, "Generate a location for the character");
	SpeciesCommand.AddCommand(LexodonCommand);LexodonCommand.AddCommand(FemaleLexodonCommand);LexodonCommand.AddCommand(MaleLexodonCommand);LexodonCommand.AddCommand(NonbinaryLexodonCommand)
	FemaleLexodonCommand.PersistentFlags().IntVarP(&speciesPrint.Number, "number", "n", 1, "Number of names to generate");FemaleLexodonCommand.PersistentFlags().BoolVarP(&speciesPrint.SpecialFlag, "special", "s", false, "Generate a special name");FemaleLexodonCommand.PersistentFlags().BoolVarP(&speciesPrint.LocationFlag, "location", "l", false, "Generate a location for the character");
	MaleLexodonCommand.PersistentFlags().IntVarP(&speciesPrint.Number, "number", "n", 1, "Number of names to generate");MaleLexodonCommand.PersistentFlags().BoolVarP(&speciesPrint.SpecialFlag, "special", "s", false, "Generate a special name");MaleLexodonCommand.PersistentFlags().BoolVarP(&speciesPrint.LocationFlag, "location", "l", false, "Generate a location for the character");
	NonbinaryLexodonCommand.PersistentFlags().IntVarP(&speciesPrint.Number, "number", "n", 1, "Number of names to generate");NonbinaryLexodonCommand.PersistentFlags().BoolVarP(&speciesPrint.SpecialFlag, "special", "s", false, "Generate a special name");NonbinaryLexodonCommand.PersistentFlags().BoolVarP(&speciesPrint.LocationFlag, "location", "l", false, "Generate a location for the character");
	SpeciesCommand.AddCommand(LizardfolkCommand);LizardfolkCommand.AddCommand(FemaleLizardfolkCommand);LizardfolkCommand.AddCommand(MaleLizardfolkCommand);LizardfolkCommand.AddCommand(NonbinaryLizardfolkCommand)
	FemaleLizardfolkCommand.PersistentFlags().IntVarP(&speciesPrint.Number, "number", "n", 1, "Number of names to generate");FemaleLizardfolkCommand.PersistentFlags().BoolVarP(&speciesPrint.SpecialFlag, "special", "s", false, "Generate a special name");FemaleLizardfolkCommand.PersistentFlags().BoolVarP(&speciesPrint.LocationFlag, "location", "l", false, "Generate a location for the character");
	MaleLizardfolkCommand.PersistentFlags().IntVarP(&speciesPrint.Number, "number", "n", 1, "Number of names to generate");MaleLizardfolkCommand.PersistentFlags().BoolVarP(&speciesPrint.SpecialFlag, "special", "s", false, "Generate a special name");MaleLizardfolkCommand.PersistentFlags().BoolVarP(&speciesPrint.LocationFlag, "location", "l", false, "Generate a location for the character");
	NonbinaryLizardfolkCommand.PersistentFlags().IntVarP(&speciesPrint.Number, "number", "n", 1, "Number of names to generate");NonbinaryLizardfolkCommand.PersistentFlags().BoolVarP(&speciesPrint.SpecialFlag, "special", "s", false, "Generate a special name");NonbinaryLizardfolkCommand.PersistentFlags().BoolVarP(&speciesPrint.LocationFlag, "location", "l", false, "Generate a location for the character");
	SpeciesCommand.AddCommand(MinotaurCommand);MinotaurCommand.AddCommand(FemaleMinotaurCommand);MinotaurCommand.AddCommand(MaleMinotaurCommand);MinotaurCommand.AddCommand(NonbinaryMinotaurCommand)
	FemaleMinotaurCommand.PersistentFlags().IntVarP(&speciesPrint.Number, "number", "n", 1, "Number of names to generate");FemaleMinotaurCommand.PersistentFlags().BoolVarP(&speciesPrint.SpecialFlag, "special", "s", false, "Generate a special name");FemaleMinotaurCommand.PersistentFlags().BoolVarP(&speciesPrint.LocationFlag, "location", "l", false, "Generate a location for the character");
	MaleMinotaurCommand.PersistentFlags().IntVarP(&speciesPrint.Number, "number", "n", 1, "Number of names to generate");MaleMinotaurCommand.PersistentFlags().BoolVarP(&speciesPrint.SpecialFlag, "special", "s", false, "Generate a special name");MaleMinotaurCommand.PersistentFlags().BoolVarP(&speciesPrint.LocationFlag, "location", "l", false, "Generate a location for the character");
	NonbinaryMinotaurCommand.PersistentFlags().IntVarP(&speciesPrint.Number, "number", "n", 1, "Number of names to generate");NonbinaryMinotaurCommand.PersistentFlags().BoolVarP(&speciesPrint.SpecialFlag, "special", "s", false, "Generate a special name");NonbinaryMinotaurCommand.PersistentFlags().BoolVarP(&speciesPrint.LocationFlag, "location", "l", false, "Generate a location for the character");
	SpeciesCommand.AddCommand(OrcCommand);OrcCommand.AddCommand(FemaleOrcCommand);OrcCommand.AddCommand(MaleOrcCommand);OrcCommand.AddCommand(NonbinaryOrcCommand)
	FemaleOrcCommand.PersistentFlags().IntVarP(&speciesPrint.Number, "number", "n", 1, "Number of names to generate");FemaleOrcCommand.PersistentFlags().BoolVarP(&speciesPrint.SpecialFlag, "special", "s", false, "Generate a special name");FemaleOrcCommand.PersistentFlags().BoolVarP(&speciesPrint.LocationFlag, "location", "l", false, "Generate a location for the character");
	MaleOrcCommand.PersistentFlags().IntVarP(&speciesPrint.Number, "number", "n", 1, "Number of names to generate");MaleOrcCommand.PersistentFlags().BoolVarP(&speciesPrint.SpecialFlag, "special", "s", false, "Generate a special name");MaleOrcCommand.PersistentFlags().BoolVarP(&speciesPrint.LocationFlag, "location", "l", false, "Generate a location for the character");
	NonbinaryOrcCommand.PersistentFlags().IntVarP(&speciesPrint.Number, "number", "n", 1, "Number of names to generate");NonbinaryOrcCommand.PersistentFlags().BoolVarP(&speciesPrint.SpecialFlag, "special", "s", false, "Generate a special name");NonbinaryOrcCommand.PersistentFlags().BoolVarP(&speciesPrint.LocationFlag, "location", "l", false, "Generate a location for the character");
	SpeciesCommand.AddCommand(OwlinCommand);OwlinCommand.AddCommand(FemaleOwlinCommand);OwlinCommand.AddCommand(MaleOwlinCommand);OwlinCommand.AddCommand(NonbinaryOwlinCommand)
	FemaleOwlinCommand.PersistentFlags().IntVarP(&speciesPrint.Number, "number", "n", 1, "Number of names to generate");FemaleOwlinCommand.PersistentFlags().BoolVarP(&speciesPrint.SpecialFlag, "special", "s", false, "Generate a special name");FemaleOwlinCommand.PersistentFlags().BoolVarP(&speciesPrint.LocationFlag, "location", "l", false, "Generate a location for the character");
	MaleOwlinCommand.PersistentFlags().IntVarP(&speciesPrint.Number, "number", "n", 1, "Number of names to generate");MaleOwlinCommand.PersistentFlags().BoolVarP(&speciesPrint.SpecialFlag, "special", "s", false, "Generate a special name");MaleOwlinCommand.PersistentFlags().BoolVarP(&speciesPrint.LocationFlag, "location", "l", false, "Generate a location for the character");
	NonbinaryOwlinCommand.PersistentFlags().IntVarP(&speciesPrint.Number, "number", "n", 1, "Number of names to generate");NonbinaryOwlinCommand.PersistentFlags().BoolVarP(&speciesPrint.SpecialFlag, "special", "s", false, "Generate a special name");NonbinaryOwlinCommand.PersistentFlags().BoolVarP(&speciesPrint.LocationFlag, "location", "l", false, "Generate a location for the character");
	SpeciesCommand.AddCommand(PlasmoidCommand);PlasmoidCommand.AddCommand(FemalePlasmoidCommand);PlasmoidCommand.AddCommand(MalePlasmoidCommand);PlasmoidCommand.AddCommand(NonbinaryPlasmoidCommand)
	FemalePlasmoidCommand.PersistentFlags().IntVarP(&speciesPrint.Number, "number", "n", 1, "Number of names to generate");FemalePlasmoidCommand.PersistentFlags().BoolVarP(&speciesPrint.SpecialFlag, "special", "s", false, "Generate a special name");FemalePlasmoidCommand.PersistentFlags().BoolVarP(&speciesPrint.LocationFlag, "location", "l", false, "Generate a location for the character");
	MalePlasmoidCommand.PersistentFlags().IntVarP(&speciesPrint.Number, "number", "n", 1, "Number of names to generate");MalePlasmoidCommand.PersistentFlags().BoolVarP(&speciesPrint.SpecialFlag, "special", "s", false, "Generate a special name");MalePlasmoidCommand.PersistentFlags().BoolVarP(&speciesPrint.LocationFlag, "location", "l", false, "Generate a location for the character");
	NonbinaryPlasmoidCommand.PersistentFlags().IntVarP(&speciesPrint.Number, "number", "n", 1, "Number of names to generate");NonbinaryPlasmoidCommand.PersistentFlags().BoolVarP(&speciesPrint.SpecialFlag, "special", "s", false, "Generate a special name");NonbinaryPlasmoidCommand.PersistentFlags().BoolVarP(&speciesPrint.LocationFlag, "location", "l", false, "Generate a location for the character");
	SpeciesCommand.AddCommand(RebornCommand);RebornCommand.AddCommand(FemaleRebornCommand);RebornCommand.AddCommand(MaleRebornCommand);RebornCommand.AddCommand(NonbinaryRebornCommand)
	FemaleRebornCommand.PersistentFlags().IntVarP(&speciesPrint.Number, "number", "n", 1, "Number of names to generate");FemaleRebornCommand.PersistentFlags().BoolVarP(&speciesPrint.SpecialFlag, "special", "s", false, "Generate a special name");FemaleRebornCommand.PersistentFlags().BoolVarP(&speciesPrint.LocationFlag, "location", "l", false, "Generate a location for the character");
	MaleRebornCommand.PersistentFlags().IntVarP(&speciesPrint.Number, "number", "n", 1, "Number of names to generate");MaleRebornCommand.PersistentFlags().BoolVarP(&speciesPrint.SpecialFlag, "special", "s", false, "Generate a special name");MaleRebornCommand.PersistentFlags().BoolVarP(&speciesPrint.LocationFlag, "location", "l", false, "Generate a location for the character");
	NonbinaryRebornCommand.PersistentFlags().IntVarP(&speciesPrint.Number, "number", "n", 1, "Number of names to generate");NonbinaryRebornCommand.PersistentFlags().BoolVarP(&speciesPrint.SpecialFlag, "special", "s", false, "Generate a special name");NonbinaryRebornCommand.PersistentFlags().BoolVarP(&speciesPrint.LocationFlag, "location", "l", false, "Generate a location for the character");
	SpeciesCommand.AddCommand(SatyrCommand);SatyrCommand.AddCommand(FemaleSatyrCommand);SatyrCommand.AddCommand(MaleSatyrCommand);SatyrCommand.AddCommand(NonbinarySatyrCommand)
	FemaleSatyrCommand.PersistentFlags().IntVarP(&speciesPrint.Number, "number", "n", 1, "Number of names to generate");FemaleSatyrCommand.PersistentFlags().BoolVarP(&speciesPrint.SpecialFlag, "special", "s", false, "Generate a special name");FemaleSatyrCommand.PersistentFlags().BoolVarP(&speciesPrint.LocationFlag, "location", "l", false, "Generate a location for the character");
	MaleSatyrCommand.PersistentFlags().IntVarP(&speciesPrint.Number, "number", "n", 1, "Number of names to generate");MaleSatyrCommand.PersistentFlags().BoolVarP(&speciesPrint.SpecialFlag, "special", "s", false, "Generate a special name");MaleSatyrCommand.PersistentFlags().BoolVarP(&speciesPrint.LocationFlag, "location", "l", false, "Generate a location for the character");
	NonbinarySatyrCommand.PersistentFlags().IntVarP(&speciesPrint.Number, "number", "n", 1, "Number of names to generate");NonbinarySatyrCommand.PersistentFlags().BoolVarP(&speciesPrint.SpecialFlag, "special", "s", false, "Generate a special name");NonbinarySatyrCommand.PersistentFlags().BoolVarP(&speciesPrint.LocationFlag, "location", "l", false, "Generate a location for the character");
	SpeciesCommand.AddCommand(ShifterCommand);ShifterCommand.AddCommand(FemaleShifterCommand);ShifterCommand.AddCommand(MaleShifterCommand);ShifterCommand.AddCommand(NonbinaryShifterCommand)
	FemaleShifterCommand.PersistentFlags().IntVarP(&speciesPrint.Number, "number", "n", 1, "Number of names to generate");FemaleShifterCommand.PersistentFlags().BoolVarP(&speciesPrint.SpecialFlag, "special", "s", false, "Generate a special name");FemaleShifterCommand.PersistentFlags().BoolVarP(&speciesPrint.LocationFlag, "location", "l", false, "Generate a location for the character");
	MaleShifterCommand.PersistentFlags().IntVarP(&speciesPrint.Number, "number", "n", 1, "Number of names to generate");MaleShifterCommand.PersistentFlags().BoolVarP(&speciesPrint.SpecialFlag, "special", "s", false, "Generate a special name");MaleShifterCommand.PersistentFlags().BoolVarP(&speciesPrint.LocationFlag, "location", "l", false, "Generate a location for the character");
	NonbinaryShifterCommand.PersistentFlags().IntVarP(&speciesPrint.Number, "number", "n", 1, "Number of names to generate");NonbinaryShifterCommand.PersistentFlags().BoolVarP(&speciesPrint.SpecialFlag, "special", "s", false, "Generate a special name");NonbinaryShifterCommand.PersistentFlags().BoolVarP(&speciesPrint.LocationFlag, "location", "l", false, "Generate a location for the character");
	SpeciesCommand.AddCommand(SimicHybridCommand);SimicHybridCommand.AddCommand(FemaleSimicHybridCommand);SimicHybridCommand.AddCommand(MaleSimicHybridCommand);SimicHybridCommand.AddCommand(NonbinarySimicHybridCommand)
	FemaleSimicHybridCommand.PersistentFlags().IntVarP(&speciesPrint.Number, "number", "n", 1, "Number of names to generate");FemaleSimicHybridCommand.PersistentFlags().BoolVarP(&speciesPrint.SpecialFlag, "special", "s", false, "Generate a special name");FemaleSimicHybridCommand.PersistentFlags().BoolVarP(&speciesPrint.LocationFlag, "location", "l", false, "Generate a location for the character");
	MaleSimicHybridCommand.PersistentFlags().IntVarP(&speciesPrint.Number, "number", "n", 1, "Number of names to generate");MaleSimicHybridCommand.PersistentFlags().BoolVarP(&speciesPrint.SpecialFlag, "special", "s", false, "Generate a special name");MaleSimicHybridCommand.PersistentFlags().BoolVarP(&speciesPrint.LocationFlag, "location", "l", false, "Generate a location for the character");
	NonbinarySimicHybridCommand.PersistentFlags().IntVarP(&speciesPrint.Number, "number", "n", 1, "Number of names to generate");NonbinarySimicHybridCommand.PersistentFlags().BoolVarP(&speciesPrint.SpecialFlag, "special", "s", false, "Generate a special name");NonbinarySimicHybridCommand.PersistentFlags().BoolVarP(&speciesPrint.LocationFlag, "location", "l", false, "Generate a location for the character");
	SpeciesCommand.AddCommand(TabaxiCommand);TabaxiCommand.AddCommand(FemaleTabaxiCommand);TabaxiCommand.AddCommand(MaleTabaxiCommand);TabaxiCommand.AddCommand(NonbinaryTabaxiCommand)
	FemaleTabaxiCommand.PersistentFlags().IntVarP(&speciesPrint.Number, "number", "n", 1, "Number of names to generate");FemaleTabaxiCommand.PersistentFlags().BoolVarP(&speciesPrint.SpecialFlag, "special", "s", false, "Generate a special name");FemaleTabaxiCommand.PersistentFlags().BoolVarP(&speciesPrint.LocationFlag, "location", "l", false, "Generate a location for the character");
	MaleTabaxiCommand.PersistentFlags().IntVarP(&speciesPrint.Number, "number", "n", 1, "Number of names to generate");MaleTabaxiCommand.PersistentFlags().BoolVarP(&speciesPrint.SpecialFlag, "special", "s", false, "Generate a special name");MaleTabaxiCommand.PersistentFlags().BoolVarP(&speciesPrint.LocationFlag, "location", "l", false, "Generate a location for the character");
	NonbinaryTabaxiCommand.PersistentFlags().IntVarP(&speciesPrint.Number, "number", "n", 1, "Number of names to generate");NonbinaryTabaxiCommand.PersistentFlags().BoolVarP(&speciesPrint.SpecialFlag, "special", "s", false, "Generate a special name");NonbinaryTabaxiCommand.PersistentFlags().BoolVarP(&speciesPrint.LocationFlag, "location", "l", false, "Generate a location for the character");
	SpeciesCommand.AddCommand(ThriKreenCommand);ThriKreenCommand.AddCommand(FemaleThriKreenCommand);ThriKreenCommand.AddCommand(MaleThriKreenCommand);ThriKreenCommand.AddCommand(NonbinaryThriKreenCommand)
	FemaleThriKreenCommand.PersistentFlags().IntVarP(&speciesPrint.Number, "number", "n", 1, "Number of names to generate");FemaleThriKreenCommand.PersistentFlags().BoolVarP(&speciesPrint.SpecialFlag, "special", "s", false, "Generate a special name");FemaleThriKreenCommand.PersistentFlags().BoolVarP(&speciesPrint.LocationFlag, "location", "l", false, "Generate a location for the character");
	MaleThriKreenCommand.PersistentFlags().IntVarP(&speciesPrint.Number, "number", "n", 1, "Number of names to generate");MaleThriKreenCommand.PersistentFlags().BoolVarP(&speciesPrint.SpecialFlag, "special", "s", false, "Generate a special name");MaleThriKreenCommand.PersistentFlags().BoolVarP(&speciesPrint.LocationFlag, "location", "l", false, "Generate a location for the character");
	NonbinaryThriKreenCommand.PersistentFlags().IntVarP(&speciesPrint.Number, "number", "n", 1, "Number of names to generate");NonbinaryThriKreenCommand.PersistentFlags().BoolVarP(&speciesPrint.SpecialFlag, "special", "s", false, "Generate a special name");NonbinaryThriKreenCommand.PersistentFlags().BoolVarP(&speciesPrint.LocationFlag, "location", "l", false, "Generate a location for the character");
	SpeciesCommand.AddCommand(TieflingCommand);TieflingCommand.AddCommand(FemaleTieflingCommand);TieflingCommand.AddCommand(MaleTieflingCommand);TieflingCommand.AddCommand(NonbinaryTieflingCommand)
	FemaleTieflingCommand.PersistentFlags().IntVarP(&speciesPrint.Number, "number", "n", 1, "Number of names to generate");FemaleTieflingCommand.PersistentFlags().BoolVarP(&speciesPrint.SpecialFlag, "special", "s", false, "Generate a special name");FemaleTieflingCommand.PersistentFlags().BoolVarP(&speciesPrint.LocationFlag, "location", "l", false, "Generate a location for the character");
	MaleTieflingCommand.PersistentFlags().IntVarP(&speciesPrint.Number, "number", "n", 1, "Number of names to generate");MaleTieflingCommand.PersistentFlags().BoolVarP(&speciesPrint.SpecialFlag, "special", "s", false, "Generate a special name");MaleTieflingCommand.PersistentFlags().BoolVarP(&speciesPrint.LocationFlag, "location", "l", false, "Generate a location for the character");
	NonbinaryTieflingCommand.PersistentFlags().IntVarP(&speciesPrint.Number, "number", "n", 1, "Number of names to generate");NonbinaryTieflingCommand.PersistentFlags().BoolVarP(&speciesPrint.SpecialFlag, "special", "s", false, "Generate a special name");NonbinaryTieflingCommand.PersistentFlags().BoolVarP(&speciesPrint.LocationFlag, "location", "l", false, "Generate a location for the character");
	SpeciesCommand.AddCommand(TortleCommand);TortleCommand.AddCommand(FemaleTortleCommand);TortleCommand.AddCommand(MaleTortleCommand);TortleCommand.AddCommand(NonbinaryTortleCommand)
	FemaleTortleCommand.PersistentFlags().IntVarP(&speciesPrint.Number, "number", "n", 1, "Number of names to generate");FemaleTortleCommand.PersistentFlags().BoolVarP(&speciesPrint.SpecialFlag, "special", "s", false, "Generate a special name");FemaleTortleCommand.PersistentFlags().BoolVarP(&speciesPrint.LocationFlag, "location", "l", false, "Generate a location for the character");
	MaleTortleCommand.PersistentFlags().IntVarP(&speciesPrint.Number, "number", "n", 1, "Number of names to generate");MaleTortleCommand.PersistentFlags().BoolVarP(&speciesPrint.SpecialFlag, "special", "s", false, "Generate a special name");MaleTortleCommand.PersistentFlags().BoolVarP(&speciesPrint.LocationFlag, "location", "l", false, "Generate a location for the character");
	NonbinaryTortleCommand.PersistentFlags().IntVarP(&speciesPrint.Number, "number", "n", 1, "Number of names to generate");NonbinaryTortleCommand.PersistentFlags().BoolVarP(&speciesPrint.SpecialFlag, "special", "s", false, "Generate a special name");NonbinaryTortleCommand.PersistentFlags().BoolVarP(&speciesPrint.LocationFlag, "location", "l", false, "Generate a location for the character");
	SpeciesCommand.AddCommand(TritonCommand);TritonCommand.AddCommand(FemaleTritonCommand);TritonCommand.AddCommand(MaleTritonCommand);TritonCommand.AddCommand(NonbinaryTritonCommand)
	FemaleTritonCommand.PersistentFlags().IntVarP(&speciesPrint.Number, "number", "n", 1, "Number of names to generate");FemaleTritonCommand.PersistentFlags().BoolVarP(&speciesPrint.SpecialFlag, "special", "s", false, "Generate a special name");FemaleTritonCommand.PersistentFlags().BoolVarP(&speciesPrint.LocationFlag, "location", "l", false, "Generate a location for the character");
	MaleTritonCommand.PersistentFlags().IntVarP(&speciesPrint.Number, "number", "n", 1, "Number of names to generate");MaleTritonCommand.PersistentFlags().BoolVarP(&speciesPrint.SpecialFlag, "special", "s", false, "Generate a special name");MaleTritonCommand.PersistentFlags().BoolVarP(&speciesPrint.LocationFlag, "location", "l", false, "Generate a location for the character");
	NonbinaryTritonCommand.PersistentFlags().IntVarP(&speciesPrint.Number, "number", "n", 1, "Number of names to generate");NonbinaryTritonCommand.PersistentFlags().BoolVarP(&speciesPrint.SpecialFlag, "special", "s", false, "Generate a special name");NonbinaryTritonCommand.PersistentFlags().BoolVarP(&speciesPrint.LocationFlag, "location", "l", false, "Generate a location for the character");
	SpeciesCommand.AddCommand(VendalkenCommand);VendalkenCommand.AddCommand(FemaleVendalkenCommand);VendalkenCommand.AddCommand(MaleVendalkenCommand);VendalkenCommand.AddCommand(NonbinaryVendalkenCommand)
	FemaleVendalkenCommand.PersistentFlags().IntVarP(&speciesPrint.Number, "number", "n", 1, "Number of names to generate");FemaleVendalkenCommand.PersistentFlags().BoolVarP(&speciesPrint.SpecialFlag, "special", "s", false, "Generate a special name");FemaleVendalkenCommand.PersistentFlags().BoolVarP(&speciesPrint.LocationFlag, "location", "l", false, "Generate a location for the character");
	MaleVendalkenCommand.PersistentFlags().IntVarP(&speciesPrint.Number, "number", "n", 1, "Number of names to generate");MaleVendalkenCommand.PersistentFlags().BoolVarP(&speciesPrint.SpecialFlag, "special", "s", false, "Generate a special name");MaleVendalkenCommand.PersistentFlags().BoolVarP(&speciesPrint.LocationFlag, "location", "l", false, "Generate a location for the character");
	NonbinaryVendalkenCommand.PersistentFlags().IntVarP(&speciesPrint.Number, "number", "n", 1, "Number of names to generate");NonbinaryVendalkenCommand.PersistentFlags().BoolVarP(&speciesPrint.SpecialFlag, "special", "s", false, "Generate a special name");NonbinaryVendalkenCommand.PersistentFlags().BoolVarP(&speciesPrint.LocationFlag, "location", "l", false, "Generate a location for the character");
	
}
