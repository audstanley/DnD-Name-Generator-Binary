// This code is generated by cmd/generator/generator.go. DO NOT EDIT.

package species
{{define "imports"}}
import (
	"fmt"
	"math/rand"
	"time"
)
{{end}}
{{define "GlobalSpecies"}}
// Generic interface for species
type Species interface {
    {{.GenericSpeciesInterface}}
}

type GenericSpecies struct {
	GlobalVariableName string   `mapstructure:"global_variable_name"` // Name of the global variable
	FirstFNames        []string `mapstructure:"first_f_names"`
	FirstMNames        []string `mapstructure:"first_m_names"`
	FirstNBNames       []string `mapstructure:"first_nb_names"`
	FirstNames         []string `mapstructure:"first_names"`
	LastNames          []string `mapstructure:"last_names"`
	SpecialNames       []string `mapstructure:"special_names"`
	LocationNames      []string `mapstructure:"location_names"`
}

func (species GenericSpecies) GetRandomFirstName() error {
	if len(species.FirstNames) == 0 {
		return fmt.Errorf("FirstNames for Aasimar List is empty")
	}
	if len(species.LastNames) == 0 {
		return fmt.Errorf("LastNames for Aasimar List is empty")
	}
	// Seed the random number generator
	// Use a new source for randomness (recommended)
	source := rand.NewSource(time.Now().UnixNano())
	random := rand.New(source)

	// Pick two random indices
	index1 := random.Intn(len(species.FirstNames))
	index2 := random.Intn(len(species.LastNames))

	// Ensure indices are unique (avoid duplicates)
	for index1 == index2 {
		index2 = random.Intn(len(species.LastNames))
	}
	fmt.Printf("%s %s\n", species.FirstNames[index1], species.LastNames[index2])
	return nil
}

// Speices types for getting First and Last names from a file.
{{range $i, $v := .Species}}type {{$v.GlobalVariableName}} = {{$v.GlobalVariableName}}{}{{printf "\n"}}{{end}}

{{range $i, $v := .Species}}var Public{{$v.GlobalVariableName}} struct{ GenericSpecies }{{printf "\n"}}{{end}}

var PublicLocationNames []string

func (species GenericSpecies) Init() {
{{range $i, $v := .Species}}    Public{{$v.GlobalVariableName}}.GlobalVariableName = "{{$v.GlobalVariableName}}"{{printf "\n"}}{{end}}
{{range $i, $v := .Species}}    Public{{$v.GlobalVariableName}}.FirstFNames = []string{"{{range $j, $y := $v.Names.FirstFNames}}"{{$y}}", {{end}}"}{{printf "\n"}}{{end}}
{{range $i, $v := .Species}}    Public{{$v.GlobalVariableName}}.FirstMNames = []string{"{{range $j, $y := $v.Names.FirstMNames}}"{{$y}}", {{end}}"}{{printf "\n"}}{{end}}
{{range $i, $v := .Species}}    Public{{$v.GlobalVariableName}}.FirstNBNames = []string{"{{range $j, $y := $v.Names.FirstNBNames}}"{{$y}}", {{end}}"}{{printf "\n"}}{{end}}
{{range $i, $v := .Species}}    Public{{$v.GlobalVariableName}}.LastNames = []string{"{{range $j, $y := $v.Names.Last}}"{{$y}}", {{end}}"}{{printf "\n"}}{{end}}
{{range $i, $v := .Species}}    Public{{$v.GlobalVariableName}}.SpecialNames = []string{"{{range $j, $y := $v.Names.Special}}"{{$y}}", {{end}}"}{{printf "\n"}}{{end}}

}

// generic species function for getting names
func GetFirstNames[T interface{}](s T) T {
	//var inc T
	return s
}
{{end}}{{template "imports" .}}{{template "GlobalSpecies" .}}