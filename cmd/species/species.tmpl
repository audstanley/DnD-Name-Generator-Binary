{{if .}}// This file is generated by cmd/generator/generator.go. DO NOT EDIT.
// This is a proof of concept for the cmd/species/species.go file{{else}}// empty data from speciesStructure from cmd/generator/generator.go file
// DELETE THIS FILE, and rerun the generator command{{end}}
package species
{{define "imports"}}
import (
    "fmt"
	"os"

	"github.com/audstanley/DnD-Name-Generator-Binary/cmd"
	"github.com/spf13/cobra"
){{end}}
{{define "variables"}}
var firstFName bool
var firstMName bool
var firstNBName bool
var lastName bool
var specialName bool
var locationName bool

{{range $i, $v := .}}var {{$v.Variable}} bool // Set default value based on struct field
{{end}}
{{end}}
{{define "getSpeciesFirstAndLastName"}}
// this function will get the species from a list of species from the
// cmd/species/speciesNames.go file and return a random first and last name
// based on the species
func getSpeciesForSpeciesCommand(species string) {
	fmt.Println("Generating names for " + species)
	switch species {
    {{range $i, $v := .}}case "{{$v.Variable}}":
        for k, v := range {{$v.GlobalVariableName}} {
            fmt.Println(k, v)
        }
    {{end}}default:
        fmt.Println("Species not found")
    }
}
{{end}}
{{define "SpeciesCommand"}}
// Add SpeciesCommand to handle the logic
var SpeciesCommand = &cobra.Command{
	Use:   "species",
	Short: "Generate names for Dungeons and Dragons species based on the species name.",
	RunE: func(cmd *cobra.Command, args []string) error {
		fmt.Println("CHECKING FOR GENDER...")
        {{range $i, $v := .}}{{$v.Variable}}, _ = cmd.Flags().GetBool("{{$v.Variable}}")
        if ({{$v.Variable}}) {
            fmt.Println("Generating {{$v.Variable}} names")
        }
        {{end}}
		return nil
	},
}{{end}}
{{define "initFunction"}}
func init() {
	cobra.OnInitialize(cmd.InitConfig)
	cmd.RootCmd.AddCommand(cmd.Generator)
	cmd.RootCmd.AddCommand(SpeciesCommand)

	// Here you will define your flags and configuration settings.
	// Cobra supports persistent flags, which, if defined here,
	// will be global for your application.
	cmd.RootCmd.PersistentFlags().StringVar(&cmd.CfgFile, "config", "", "config file (default is $HOME/.dnd-names.yaml)")
	//RootCmd.PersistentFlags().StringArrayP("number", "n", []string{"1"}, "Number of names to generate")

	// Cobra also supports local flags, which will only run
	// when this action is called directly.
	cmd.RootCmd.PersistentFlags().BoolVar(&cmd.EnableDebug, "debug", os.Getenv("DEBUG") == "true", "Enable debug mode")
	cmd.RootCmd.Flags().IntVarP(&cmd.Count, "number", "n", 1, "Number of names to generate")
	//RootCmd.PersistentFlags().BoolVarP(&generate, "generate", "g", false, "generate names from the generator/names.txt file, outputs go code to cmd/names.go")
	SpeciesCommand.PersistentFlags().BoolVar(&firstFName, "first", false, "generate a first name, make sure to specify the species")

    {{range $i, $v := .}}SpeciesCommand.PersistentFlags().BoolVar(&{{$v.Variable}}, "{{$v.Variable}}", false, "generate {{$v.Variable}} names")
    {{end}}
}
{{end}}
{{template "imports" .}}{{template "variables" .}}{{template "getSpeciesFirstAndLastName" .}}{{template "SpeciesCommand" .}}{{template "initFunction" .}}